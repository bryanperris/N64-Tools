#include "StdAfx.h"
#include "Kobe2ADPCMDecoder.h"

CKobe2ADPCMDecoder::CKobe2ADPCMDecoder(void)
{
	variable801242EC_C_S2 = 0;
	variable801242F0_10_S2_CompressedDataSpot = 0;
	variable801242F8_18_S2 = 0;
	variable80124300_20_S2 = 0;
	variable8012430C_2C_S2 = 0;
	variable80124320_40_S2 = 0;

	variable_801283B4 = 0x105;
	variable_80128454 = 0xA0;
	variable_80128458 = 0x00000000;
	variable_801283B0_ROM_Location = 0xD26048;
	variable_80124338 = 0x5F;
	variable_8012433C = 0x2F;
}

CKobe2ADPCMDecoder::~CKobe2ADPCMDecoder(void)
{
}

unsigned short CKobe2ADPCMDecoder::CharArrayToShort(unsigned char* currentSpot)
{
	return ((currentSpot[0] << 8) | currentSpot[1]);
}

unsigned long CKobe2ADPCMDecoder::CharArrayToLong(unsigned char* currentSpot)
{
	return ((((((currentSpot[0] << 8) | currentSpot[1]) << 8) | currentSpot[2]) << 8) | currentSpot[3]);
}

unsigned short CKobe2ADPCMDecoder::Flip16Bit(unsigned short ShortValue)
{
	return ((ShortValue >> 8) | ((ShortValue << 8)));
}

unsigned long CKobe2ADPCMDecoder::Flip32Bit(unsigned long inLong)
{
	return (((inLong & 0xFF000000) >> 24) | ((inLong & 0x00FF0000) >> 8) | ((inLong & 0x0000FF00) << 8) | ((inLong & 0x000000FF) << 24));
}

void CKobe2ADPCMDecoder::WriteLongToFile(FILE* outFile, unsigned long data)
{
	unsigned long tempLong = Flip32Bit(data);
	fwrite(&tempLong, 1, 4, outFile);
}

void CKobe2ADPCMDecoder::WriteShortToFile(FILE* outFile, unsigned short data)
{
	unsigned short tempLong = Flip16Bit(data);
	fwrite(&tempLong, 1, 2, outFile);
}

void CKobe2ADPCMDecoder::WriteLongToBuffer(unsigned char* Buffer, unsigned long address, unsigned long data)
{
	Buffer[address & 0xFFFFFF] = ((data >> 24) & 0xFF);
	Buffer[(address & 0xFFFFFF)+1] = ((data >> 16) & 0xFF);
	Buffer[(address & 0xFFFFFF)+2] = ((data >> 8) & 0xFF);
	Buffer[(address & 0xFFFFFF)+3] = ((data) & 0xFF);
}

void CKobe2ADPCMDecoder::WriteShortToBuffer(unsigned char* Buffer, unsigned long address, unsigned short data)
{
	Buffer[(address & 0xFFFFFF)] = ((data >> 8) & 0xFF);
	Buffer[(address & 0xFFFFFF)+1] = ((data) & 0xFF);	
}


void CKobe2ADPCMDecoder::Function800839C0(unsigned char* ROM, int romSize, unsigned long address, unsigned long length, unsigned char* Buffer, std::vector<unsigned short>& pcmSamples, unsigned long A0Param, unsigned long A1Param, unsigned long A2Param)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = A2Param;
	unsigned long A3 = 0;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;

	// SP - 0x40

	unsigned char stackBuffer[0x40];
	for (int x = 0; x < 0x40; x++)
	{
		stackBuffer[x] = 0x00;
	}

	WriteLongToBuffer(stackBuffer, 0x1C, S1); // S1 to 1C(SP)
	S1 = A0;
	// RA to 3C(SP)
	WriteLongToBuffer(stackBuffer, 0x38, S8);
	WriteLongToBuffer(stackBuffer, 0x34, S7);
	WriteLongToBuffer(stackBuffer, 0x30, S6);
	WriteLongToBuffer(stackBuffer, 0x2C, S5);
	WriteLongToBuffer(stackBuffer, 0x28, S4);
	WriteLongToBuffer(stackBuffer, 0x24, S3);
	WriteLongToBuffer(stackBuffer, 0x20, S2);
	WriteLongToBuffer(stackBuffer, 0x18, S0);

	V0 = Buffer[S1 & 0xFFFFFF];
	stackBuffer[0x10] = V0;
	V0 = Buffer[S1 + 1 & 0xFFFFFF];
	stackBuffer[0x11] = V0;

	A3 = (signed short)CharArrayToShort(&stackBuffer[0x10]);
	V0 = Buffer[S1 + 2 & 0xFFFFFF];
	S4 = A1; // Output spot
	stackBuffer[0x12] = V0;
	V0 = Buffer[S1 + 3 & 0xFFFFFF];

	//80083A14
	S2 = A2 - 1;
	stackBuffer[0x13] = V0;
	S5 = (signed short)CharArrayToShort(&stackBuffer[0x12]);
	V0 = Buffer[S1 + 4 & 0xFFFFFF];
	S0 = A3 & 0x3;
	stackBuffer[0x14] = V0;
	V0 = (signed short)0xFFFC;
	A3 = A3 & V0;

	V0 = 0x801283C0;
	V1 = Buffer[S1 + 5 & 0xFFFFFF];
	stackBuffer[0x15] = V1;
	V1 = S0 << 2;
	V1 = V1 + V0;
	
	//80083A4C
	S3 = Buffer[S1 + 4 & 0xFFFFFF];
	V0 = CharArrayToLong(&Buffer[V1 & 0xFFFFFF]);
	V0 = V0 + 1;
	WriteLongToBuffer(Buffer, V1 & 0xFFFFFF, V0);

	//80083A5C
	V0 = 0x800DE6A0; // Predictors
	V1 = S0 << 3;
	V1 = V1 + V0;
	V0 = (signed short)0xFFFF;
	S8 = CharArrayToLong(&Buffer[(V1 & 0xFFFFFF)]);
	S7 = CharArrayToLong(&Buffer[(V1 & 0xFFFFFF) + 4]);

	S1 = S1 + 5;
	if (S2 != V0)
	{
		//80083A80
		WriteShortToBuffer(Buffer, S4 & 0xFFFFFF, A3 & 0xFFFF); // Output
		pcmSamples.push_back(A3 & 0xFFFF);
		S2 = S2 + V0;

		S4 = S4 + 2;
		if (S2 != V0)
		{
			WriteShortToBuffer(Buffer, S4 & 0xFFFFFF, S5 & 0xFFFF); // Output	
			pcmSamples.push_back(S5 & 0xFFFF);
			S4 = S4 + 2;
			
			S2 = S2 + V0;

			S6 = 1;
			if (S2 != V0)
			{
				do
				{
					//80083AA4
					if (S6 != 0)
					{
						S6 = 0;
						V0 = Buffer[S1 & 0xFFFFFF];
						V0 = V0 << 0x18;

						// Goto 80083AC8
					}
					else
					{
						//80083AB8
						S6 = 0;

						V0 = (signed char)Buffer[S1 & 0xFFFFFF];
						S1 = S1 + 1;
						S6 = 1;
						V0 = V0 << 0x1C;
					}

					//80083AC8
					A1 = (int)V0 >> 0x1C;

					A0 = (unsigned long)S5 * S8;

					//80083ADC
					V1 = (unsigned long)A3 * S7;
					V0 = S3 << 2;
					T0 = 0x800DE740;
					V0 = V0 + T0;
					V0 = CharArrayToLong(&Buffer[V0 & 0xFFFFFF]);

					//80083AFC
					unsigned long tempValue = (unsigned long)A1 * V0;
					V0 = A0 + V1;
					S0 = (int)V0 >> 8;
					V0 = (signed short)0x7FFF;
					A3 = tempValue;
					S0 = S0 + A3;
					V0 = (signed long)V0 < (signed long)S0;

					//80083B18
					if (V0 == 0)
					{
						//80083B28
						V0 = (signed long)S0 < (signed short)0x8000;

						if (V0 != 0)
						{
							S0 = (signed short)0x8000;
						}
					}
					else
					{
						//80083B20
						V0 = (signed long)S0 < (signed short)0x8000;

						S0 = 0x7FFF;
						// Go to 80083B30
					}

					//80083B30
					V0 = A1 & 0xF;
					V0 = V0 << 2;
					T0 = 0x800DE700;

					V0 = V0 + T0;
					//80083B44
					WriteShortToBuffer(Buffer, S4 & 0xFFFFFF, S0 & 0xFFFF); // Output
					pcmSamples.push_back(S0 & 0xFFFF);

					//80083B48
					V0 = CharArrayToLong(&Buffer[V0 & 0xFFFFFF]);
					S3 = S3 + V0;

					S4 = S4 + 2;

					//80083B50
					if ((int)S3 >= 0)
					{
						//80083B60
						V0 = (signed long)S3 < 0x59;
						
						A3 = S5;
						if (V0 == 0)
						{
							S3 = 0x58;

							A0 = 0x800F0510;
							// TODO JAL 0x8000FEB0

							//80083B7C
							A3 = S5;
						}
						else
						{
							//goto 80083B80
						}
					}
					else
					{
						//80083B58
						S3 = 0;

						// Go to 80083B7C
						A3 = S5;
					}

					//80083B80
					S2 = S2 - 1;
					V0 = (signed short)0xFFFF;

					S5 = S0;
					//80083B88
				} while  (S2 != V0); // GOTO 80083AA4
			}
			else
			{
				goto label80083B90;
			}
		}
		else
		{
			goto label80083B90;
		}
	}
	else
	{
		goto label80083B90;
	}

label80083B90:
	//RA = 3C(SP)
	S8 = CharArrayToLong(&stackBuffer[0x38]);
	S7 = CharArrayToLong(&stackBuffer[0x34]);
	S6 = CharArrayToLong(&stackBuffer[0x30]);
	S5 = CharArrayToLong(&stackBuffer[0x2C]);
	S4 = CharArrayToLong(&stackBuffer[0x28]);
	S3 = CharArrayToLong(&stackBuffer[0x24]);
	S2 = CharArrayToLong(&stackBuffer[0x20]);
	S1 = CharArrayToLong(&stackBuffer[0x1C]);
	S0 = CharArrayToLong(&stackBuffer[0x18]);

	// SP back + 0x40
}



void CKobe2ADPCMDecoder::Function8008102C(unsigned char* ROM, int romSize, unsigned long address, unsigned long length, unsigned char* Buffer, std::vector<unsigned short>& pcmSamples, unsigned long A0Param, unsigned long A1Param, unsigned long A2Param)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = A2Param;
	unsigned long A3 = 0;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;

	//8008102C

	S2 = A0; //801242E0 for this one
	S4 = A2;

	S6 = variable801242EC_C_S2;
	S5 = variable80124320_40_S2;

	S0 = A1;

	//80081060
	if (S4 != 0)
	{
		do
		{
			S1 = variable8012430C_2C_S2;

			//8008106C
			V0 = S4 < S1;
			if (S1 != 0)
			{
				goto label800810C4;
			}
			else
			{
				V0 = variable80124300_20_S2;

				A1 = S2 + 0x74;
				//80081078
				if (V0 == 0)
				{
					WriteLongToBuffer(Buffer, S2 & 0xFFFFFF, 0);
					// GOTO 800811D4
					variable801242F0_10_S2_CompressedDataSpot = 0xFFFFFFFF;
					return;
				}

				//8008108C
				A0 = variable801242F0_10_S2_CompressedDataSpot;
				S1 = CharArrayToShort(&Buffer[A0 & 0xFFFFFF]); //0(A0)
				A0 = A0 + 2;

				A2 = S1;
				Function800839C0(ROM, romSize, address, length, Buffer, pcmSamples, A0, A1, A2);

				V0 = variable801242F0_10_S2_CompressedDataSpot;
				V1 = variable80124300_20_S2;

				variable8012430C_2C_S2 = S1;
				variable801242F8_18_S2 = 0;

				V0 = V0 + 0xC0;
				V1 = V1 - 1;

				variable801242F0_10_S2_CompressedDataSpot = V0;
				variable80124300_20_S2 = V1;

				V0 = (signed long)S4 < (signed long)S1;

label800810C4:
				if (V0 != 0)
				{
					S1 = S4;
				}

				//V1 = 2(S6); // sampling rate
				V0 = 0x5622;

				//800810D4
				//TODO if (Rates not match branch) to 80081140
				//goto label80081140;

				// Some mixer, never really could get right

				A0 = 0;
				if ((int)S1 > 0)
				{
					do
					{
						//800810E4
						V1 = variable801242F8_18_S2;
						V0 = V1 << 1;

						V0 = S2 + V0;

						S3 = (signed short)CharArrayToShort(&Buffer[(V0 & 0xFFFFFF) + 0x74]);
						A3 = S3 * S5;

						V1 = V1 + 1;
						variable801242F8_18_S2 = V1;

						V0 = CharArrayToLong(&Buffer[S0 & 0xFFFFFF]);

						S3 = (int)A3 >> 7;
						V0 = V0 + S3;

						WriteLongToBuffer(Buffer, S0 & 0xFFFFFF, V0);
						//pcmScaledSamples.push_back(V0);

						S0 = S0 + 4;

						V0 = CharArrayToLong(&Buffer[S0 & 0xFFFFFF]);
						A0 = A0 + 1;
						V0 = V0 + S3;
						WriteLongToBuffer(Buffer, S0 & 0xFFFFFF, V0);
						//pcmScaledSamples.push_back(V0);

						V0 = (int)A0 < (int)S1;
						S0 = S0 + 4;
					}
					while (V0 != 0);
				}

				//80081134
				V0 = variable8012430C_2C_S2;

				V0 = V0 - S1;

				// j to 800811C8
				goto label800811C8;

	label80081140:
				//80081140 TODO
				;
	label800811C8:
				S4 = S4 - S1;
				variable8012430C_2C_S2 = V0;
			}
		} while (S4 != 0);
	}
}

// A0 ROM Address
// A1 RAM Location
// A2 Size
void CKobe2ADPCMDecoder::Function80083854(unsigned char* ROM, int romSize, unsigned char* Buffer, unsigned long A0Param, unsigned long A1Param, unsigned long A2Param)
{
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = A2Param;

	memcpy(&Buffer[A1 & 0xFFFFFF], &ROM[A0], A2);
}

void CKobe2ADPCMDecoder::Function80084330(unsigned char* ROM, int romSize, unsigned char* Buffer, unsigned long A0Param, unsigned long A1Param, unsigned long A2Param)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = A2Param;
	unsigned long A3 = 0;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;

	T0 = 0;
	T3 = 0;

	T6 = 0x800F0580;
	T4 = 1;
	T5 = 0x20;

	V0 = T3 << 0x10;

	int checkV0 = 0;
	do
	{
		//8008434C
		T2 = (int)V0 >> 0x10;

		V0 = T2 + T6;

		//80084354
		A3 = Buffer[V0 & 0xFFFFFF];

		V0 = (signed long)T0 < (signed long)A3;
		// 80084358
		if (T0 == 0)
		{
			T1 = CharArrayToLong(&Buffer[A0 & 0xFFFFFF]); // Read input

			// A0 Input position RAM
			A0 = A0 + 4;
			T0 = 0x20;

			V0 = (signed long)T0 < (signed long)A3;
		}

		//80084370
		V1 = T1;
		if (V0 == 0)
		{
			//800843B0
			V0 = T4 << A3;
			A2 = V0 - 1;
			V0 = T2 << 1;
			V0 = V0 + A1;
			V1 = T1 & A2;
			WriteShortToBuffer(Buffer, V0 & 0xFFFFFF, V1);
			T1 = T1 >> A3;
			T0 = T0 - A3;
		}
		else
		{
			A3 = A3 - T0;
			T1 = CharArrayToLong(&Buffer[A0 & 0xFFFFFF]); // Read input
			A0 = A0 + 4;

			V0 = T4 << A3;
			A2 = V0 - 1;
			V0 = T1 & A2;
			V0 = V0 << T0;
			V1 = V1 | V0;
			T1 = T1 >> A3;
			T0 = T5 - A3;
			V0 = T2 << 1;
			V0 = V0 + A1;

			WriteShortToBuffer(Buffer, V0 & 0xFFFFFF, V1);
		}

		//800843D0
		V0 = T3 + 1;
		T3 = V0;
		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x10;
		V0 = (int)V0 < 0x39;

		checkV0 = (V0 != 0);
		V0 = T3 << 0x10;
	} while (checkV0);
}

void CKobe2ADPCMDecoder::Function80086080(unsigned char* ROM, int romSize, unsigned char* Buffer, unsigned long A0Param, unsigned long A1Param, unsigned long A2Param, unsigned long SPParam)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = A2Param;
	unsigned long A3 = 0;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = SPParam;

	T0 = A1;
	A2 = A2 << 0x10;
	A2 = (int)A2 >> 0x10;

	T1 = 0;
	//8008608C
	if (A2 <= 0)
	{
		return;
	}
	else
	{
		do
		{
			//80086094
			V0 = T1 << 0x10;
			V0 = (int)V0 >> 0xF;
			A3 = V0 + A0;

			V1 = (signed short)CharArrayToShort(&Buffer[A3 & 0xFFFFFF]);
			V0 = T0 << 0x10;
			V0 = (int)V0 >> 0x10;

			V1 = (int)V1 < (int)V0;

			//800860B0
			if (V1 != 0)
			{
				WriteShortToBuffer(Buffer, A3, T0);
			}

			V1 = (signed short)CharArrayToShort(&Buffer[A3 & 0xFFFFFF]);
			V0 = T1 + 1;
			T1 = V0;
			V0 = V0 << 0x10;
			V0 = (int)V0 >> 0x10;

			V0 = (int)V0 < (int)A2;

			T0 = V1 + A1;
		} while (V0 != 0);
	}
}

void CKobe2ADPCMDecoder::Function80085AD0(unsigned char* ROM, int romSize, unsigned char* Buffer, unsigned long A0Param, unsigned long A1Param, unsigned long A2Param, unsigned long SPParam)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = A2Param;
	unsigned long A3 = 0;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = SPParam;

	T4 = A1;
	T0 = A0;
	A2 = A2 << 0x10;
	A2 = (int)A2 >> 0x10;

	T1 = 0;
	if (A2 <= 0)
	{
		return;
	}
	else
	{
		T2 = 0x800F2530;
		T3 = A2;

		do
		{
			//80085AF4
			V0 = Buffer[T0 & 0xFFFFFF];
			A3 = Buffer[(T0 & 0xFFFFFF) + 1];

			T0 = T0 + 2;
			A1 = T1 << 0x10;
			A0 = T1 + 1;

			T1 = A0;
			A1 = (int)A1 >> 0xF;
			A2 = V0 << 1;
			A2 = A2 + T2;

			//80085B18
			V0 = V0 + 1;
			V0 = V0 << 1;
			V0 = V0 + T2;

			//80085B24
			V0 = (signed short)CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);
			V1 = (signed short)CharArrayToShort(&Buffer[A2 & 0xFFFFFF]);

			A1 = A1 + T4;
			V0 = V0 - V1;

			T5 = A3 * V0;

			A0 = A0 << 0x10;
			A0 = (int)A0 >> 0x10;

			A0 = (int)A0 < (int)T3;

			V0 = (signed short)CharArrayToShort(&Buffer[A2 & 0xFFFFFF]);

			V1 = (int)T5 >> 8;

			V0 = V0 + V1;

			WriteShortToBuffer(Buffer, A1, V0);
		} while(A0 != 0);






	}
}

void CKobe2ADPCMDecoder::Function80085370(unsigned char* ROM, int romSize, unsigned char* Buffer, unsigned long A0Param, unsigned long A1Param, unsigned long A2Param, unsigned long SPParam)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = A2Param;
	unsigned long A3 = 0;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = SPParam;

	SP = SP + (signed short)0xFF78;
	T0 = A0;
	V1 = CharArrayToShort(&Buffer[T0 & 0xFFFFFF]);

	V0 = 0x800F0664;

	//80085398
	V1 = V1 << 3;
	V1 = (unsigned long)V1 + (unsigned long)V0;

	V0 = CharArrayToShort(&Buffer[V1 & 0xFFFFFF]);
	WriteShortToBuffer(Buffer, SP + 0x10, V0);

	V0 = CharArrayToShort(&Buffer[(V1 & 0xFFFFFF) + 2]);
	WriteShortToBuffer(Buffer, SP + 0x12, V0);

	V0 = CharArrayToShort(&Buffer[(V1 & 0xFFFFFF) + 4]);
	WriteShortToBuffer(Buffer, SP + 0x28, V0);

	V0 = CharArrayToShort(&Buffer[(V1 & 0xFFFFFF) + 6]);
	WriteShortToBuffer(Buffer, SP + 0x2A, V0);

	V1 = (signed short)CharArrayToShort(&Buffer[(T0 & 0xFFFFFF) + 2]);
	V0 = 0x800F0A64;

	//800853CC
	V1 = V1 << 3;
	V1 = (unsigned long)V1 + (unsigned long)V0;

	V0 = CharArrayToShort(&Buffer[V1 & 0xFFFFFF]);
	WriteShortToBuffer(Buffer, SP + 0x14, V0);

	V0 = CharArrayToShort(&Buffer[(V1 & 0xFFFFFF) + 2]);
	WriteShortToBuffer(Buffer, SP + 0x16, V0);

	V0 = CharArrayToShort(&Buffer[(V1 & 0xFFFFFF) + 4]);
	S2 = A1;

	WriteShortToBuffer(Buffer, SP + 0x2C, V0);
	V0 = CharArrayToShort(&Buffer[(V1 & 0xFFFFFF) + 6]);
	S3 = A2;
	WriteShortToBuffer(Buffer, SP + 0x2E, V0);

	A0 = CharArrayToShort(&Buffer[(T0 & 0xFFFFFF) + 4]);
	V0 = 0x800F1264;

	V1 = (unsigned long)(((__int64)A0 << 0x10) >> 0x11);

	V1 = V1 << 3;
	A0 = A0 & 1;
	V1 = V1 + V0;

	//80085418
	if (A0 != 0)
	{
		V0 = CharArrayToShort(&Buffer[V1 & 0xFFFFFF]);
		V0 = -V0;
		WriteShortToBuffer(Buffer, SP + 0x18, V0);

		V0 = CharArrayToShort(&Buffer[(V1 & 0xFFFFFF) + 2]);
		V0 = -V0;
		WriteShortToBuffer(Buffer, SP + 0x1A, V0);

		V0 = CharArrayToShort(&Buffer[(V1 & 0xFFFFFF) + 4]);
		V0 = -V0;
		WriteShortToBuffer(Buffer, SP + 0x30, V0);

		V0 = CharArrayToShort(&Buffer[(V1 & 0xFFFFFF) + 6]);
		V0 = -V0;
		WriteShortToBuffer(Buffer, SP + 0x32, V0);
	}
	else
	{
		V0 = CharArrayToShort(&Buffer[V1 & 0xFFFFFF]);
		WriteShortToBuffer(Buffer, SP + 0x18, V0);

		V0 = CharArrayToShort(&Buffer[(V1 & 0xFFFFFF) + 2]);
		WriteShortToBuffer(Buffer, SP + 0x1A, V0);

		V0 = CharArrayToShort(&Buffer[(V1 & 0xFFFFFF) + 4]);
		WriteShortToBuffer(Buffer, SP + 0x30, V0);

		V0 = CharArrayToShort(&Buffer[(V1 & 0xFFFFFF) + 6]);
		WriteShortToBuffer(Buffer, SP + 0x32, V0);
	}

	//80085474
	V1 = (signed short)CharArrayToShort(&Buffer[(T0 & 0xFFFFFF) + 6]);
	V0 = 0x800F1A64;

	V1 = V1 << 3;
	V1 = V1 + V0;

	//80085488
	V0 = CharArrayToShort(&Buffer[V1 & 0xFFFFFF]);
	WriteShortToBuffer(Buffer, SP + 0x1C, V0);

	V0 = CharArrayToShort(&Buffer[(V1 & 0xFFFFFF) + 2]);
	WriteShortToBuffer(Buffer, SP + 0x1E, V0);

	V0 = CharArrayToShort(&Buffer[(V1 & 0xFFFFFF) + 4]);
	A3 = 0;
	WriteShortToBuffer(Buffer, SP + 0x34, V0);

	T5 = 0x801288B0;
	T4 = 0x800F0650;

	V0 = CharArrayToShort(&Buffer[(V1 & 0xFFFFFF) + 6]);
	WriteShortToBuffer(Buffer, SP + 0x36, V0);

	V1 = (signed short)CharArrayToShort(&Buffer[(T0 & 0xFFFFFF) + 8]);
	V0 = 0x800F2264;

	V1 = V1 << 3;
	V1 = V1 + V0;

	//800854D0
	V0 = CharArrayToShort(&Buffer[V1 & 0xFFFFFF]);
	T3 = SP + 0x40;
	WriteShortToBuffer(Buffer, SP + 0x20, V0);

	V0 = CharArrayToShort(&Buffer[(V1 & 0xFFFFFF) + 2]);
	T2 = SP + 0x10;
	WriteShortToBuffer(Buffer, SP + 0x22, V0);

	V0 = CharArrayToShort(&Buffer[(V1 & 0xFFFFFF) + 4]);
	T1 = SP + 0x58;
	WriteShortToBuffer(Buffer, SP + 0x38, V0);

	V0 = CharArrayToShort(&Buffer[(V1 & 0xFFFFFF) + 6]);
	T0 = SP + 0x28;
	WriteShortToBuffer(Buffer, SP + 0x3A, V0);

	//80085500
	do
	{
		A1 = A3 << 0x10;
		A1 = A1 >> 0xF;

		A2 = A1 + T5;

		A0 = (signed short)CharArrayToShort(&Buffer[A2 & 0xFFFFFF]);

		V0 = A0 << 3;
		V0 = (unsigned long)V0 + (unsigned long)A0;

		V0 = V0 << 3;
		V0 = V0 - A0;

		V1 = V0 << 2;
		V0 = V0 + V1;

		V1 = V0 << 4;
		V1 = V1 - V0;

		V1 = V1 << 2;
		V1 = V1 - A0;

		V0 = A1 + T4;
		V0 = CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);

		V1 = (int)V1 >> 0xF;
		V1 = V1 + V0;
		V0 = T2 + A1;

		//8008554C
		V0 = CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);
		A0 = T3 + A1;
		V0 = V0 + V1;

		//80085558
		WriteShortToBuffer(Buffer, A0, V0);
		A0 = (unsigned long)T0 + (unsigned long)A1;

		V0 = CharArrayToShort(&Buffer[A0 & 0xFFFFFF]);
		A1 = T1 + A1;
		V0 = V0 + V1;
		WriteShortToBuffer(Buffer, A1, V0);

		V0 = A3 + 1;
		A3 = V0;

		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x10;

		V1 = CharArrayToShort(&Buffer[A0 & 0xFFFFFF]);
		V0 = V0 < 0xA;

		WriteShortToBuffer(Buffer, A2, V1);
		//80085588
	} while (V0 != 0);

	//80085590
	S1 = SP + 0x40;
	A0 = S1;
	A1 = 0xCD;

	A2 = 0xA;

	//8008559C
	Function80086080(ROM, romSize, Buffer, A0, A1, A2, SP);
	
	S0 = SP + 0x58;
	A0 = S0;
	A1 = 0xCD;
	A2 = 0xA;

	//800855AC
	Function80086080(ROM, romSize, Buffer, A0, A1, A2, SP);

	A0 = S1;
	A1 = S2;

	A2 = 0xA;
	//800855C0
	Function80085AD0(ROM, romSize, Buffer, A0, A1, A2, SP);

	A0 = S0;
	A1 = S3;

	A2 = 0xA;
	//800855D0
	Function80085AD0(ROM, romSize, Buffer, A0, A1, A2, SP);

	//RA = 80(SP)];
	SP = SP + 0x88;
}

void CKobe2ADPCMDecoder::Function800859BC(unsigned char* ROM, int romSize, unsigned char* Buffer, unsigned long A0Param, unsigned long A1Param, unsigned long SPParam)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = 0;
	unsigned long A3 = 0;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = SPParam;

	T1 = A0;
	A2 = A1;

	V0 = 0x01000000;

	WriteLongToBuffer(Buffer, A2, V0);
	V0 = (signed short)CharArrayToShort(&Buffer[T1 & 0xFFFFFF]);

	//800859D0
	T1 = T1 + 4;
	T2 = 2;
	T4 = 1;
	V0 = V0 << 0xA;
	V0 = -V0;
	WriteLongToBuffer(Buffer, A2 + 4, V0);

	//800859E8
	A2 = A2 + 8;
	do
	{
		V0 = CharArrayToLong(&Buffer[(A2 & 0xFFFFFF) + (signed short)0xFFF8]);
		WriteLongToBuffer(Buffer, A2, V0);

		//800859F4
		V0 = T2 << 0x10;
		V1 = (int)V0 >> 0x10;
		V0 = (signed long)T4 < (signed long)V1;
		T0 = 1;

		//80085A00
		if (V0 != 0)
		{
			T3 = V1;
			A3 = A2 + (signed short)0xFFF8;

			do
			{
				V0 = CharArrayToLong(&Buffer[(A3 & 0xFFFFFF) + 4]);

				//80085A14
				A1 = (int)V0 >> 0x10;
				V0 = (int)V0 >> 1;
				V1 = A1 << 0xF;

				V0 = V0 - V1;
				V0 = V0 << 0x10;

				//80085A28
				V1 = (signed short)CharArrayToShort(&Buffer[T1 & 0xFFFFFF]);
				V0 = (int)V0 >> 0x10;

				V0 = V0 * V1;
				A0 = T0 + 1;
				T0 = A0;

				//80085A40
				A0 = A0 << 0x10;
				A0 = (int)A0 >> 0x10;

				V1 = A1 * V1;
				A0 = (int)A0 < (int)T3;

				A1 = CharArrayToLong(&Buffer[A3 & 0xFFFFFF]);

				A3 = A3 - 4;
				V0 = (int)V0 >> 0xF;

				//80085A60
				V0 = V0 + V1;
				V1 = CharArrayToLong(&Buffer[A2 & 0xFFFFFF]);

				//80085A68
				V0 = V0 << 2;
				V1 = V1 + A1;
				V1 = V1 - V0;
				WriteLongToBuffer(Buffer, A2, V1);

				A2 = A2 - 4;
			} while (A0 != 0);
		}

		//80085A80
		A0 = (signed short)CharArrayToShort(&Buffer[T1 & 0xFFFFFF]);
		T1 = T1 + 4;

		A1 = T2 << 0x10;
		V1 = T2 + 1;
		T2 = V1;

		A1 = (int)A1 >> 0xE;
		V1 = V1 << 0x10;
		V1 = (int)V1 >> 0x10;

		//80085AA0
		V1 = (int)V1 < 6;

		V0 = CharArrayToLong(&Buffer[A2 & 0xFFFFFF]);
		A0 = A0 << 0xA;
		V0 = V0 - A0;

		WriteLongToBuffer(Buffer, A2, V0);
		A2 = A2 + A1;
	} while (V1 != 0);
}

void CKobe2ADPCMDecoder::Function80085890(unsigned char* ROM, int romSize, unsigned char* Buffer, unsigned long A0Param, unsigned long A1Param, unsigned long A2Param, unsigned long SPParam)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = A2Param;
	unsigned long A3 = 0;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = SPParam;

	SP = SP + (signed short)0xFFB0;

	WriteLongToBuffer(Buffer, (SP + 0x44), S1);
	S0 = A0;
	S1 = A1;
	// RA to SP

	A1 = SP + 0x10;
	Function800859BC(ROM, romSize, Buffer, A0, A1, SP);

	//800858B0
	A0 = S0 + 2;
	S0 = SP + 0x28;

	A1 = S0;

	//800858B8
	Function800859BC(ROM, romSize, Buffer, A0, A1, SP);

	T0 = 5;
	A3 = SP + 0x10;

	do
	{
		A0 = T0 << 0x10;
		A0 = (int)A0 >> 0x10;

		A1 = A0 << 2;
		A2 = A3 + A1;
		A0 = A0 - 1;

		//800858DC
		A0 = A0 << 2;
		V1 = A3 + A0;
		A1 = S0 + A1;

		//800858E8
		V0 = CharArrayToLong(&Buffer[A2 & 0xFFFFFF]);
		V1 = CharArrayToLong(&Buffer[V1 & 0xFFFFFF]);

		A0 = S0 + A0;
		V0 = V0 + V1;
		V1 = T0 - 1;
		T0 = V1;

		WriteLongToBuffer(Buffer, A2, V0);

		//80085904
		V0 = CharArrayToLong(&Buffer[A1 & 0xFFFFFF]);
		A0 = CharArrayToLong(&Buffer[A0 & 0xFFFFFF]);

		//8008590C
		V1 = V1 << 0x10;
		V0 = V0 - A0;

		WriteLongToBuffer(Buffer, A1, V0);
	} while ((signed long)V1 > 0);

	//8008591C
	V0 = 0x1000;
	WriteShortToBuffer(Buffer, S1, V0);

	//80085924
	T0 = 1;
	T1 = 0xA;
	T3 = SP + 0x10;
	T2 = SP + 0x28;

	do
	{
		//80085934
		V1 = T0 << 0x10;
		V1 = (int)V1 >> 0x10;

		A2 = V1 << 2;
		A3 = T3 + A2;
		A2 = T2 + A2;

		A0 = T0 + 1;

		//8008594C
		T0 = A0;
		V1 = V1 << 1;
		V1 = V1 + S1;

		A0 = A0 << 0x10;
		A0 = (int)A0 >> 0x10;

		A1 = CharArrayToLong(&Buffer[A3 & 0xFFFFFF]);
		V0 = CharArrayToLong(&Buffer[A2 & 0xFFFFFF]);

		//80085968
		A0 = (int)A0 < 6;
		V0 = A1 + V0;
		V0 = V0 + 0x1000;

		V0 = (int)V0 >> 0xD;
		WriteShortToBuffer(Buffer, V1, V0);
		V1 = T1 << 0x10;

		T1 = T1 - 1;
		V1 = (int)V1 >> 0xF;

		//80085988
		A1 = CharArrayToLong(&Buffer[A3 & 0xFFFFFF]);
		V0 = CharArrayToLong(&Buffer[A2 & 0xFFFFFF]);

		V1 = V1 + S1;
		V0 = A1 - V0;

		V0 = V0 + 0x1000;
		V0 = (int)V0 >> 0xD;

		WriteShortToBuffer(Buffer, V1, V0);
	}
	while (A0 != 0);

	// Reload back S1s/RA
	SP = SP + 0x50;









	

}

void CKobe2ADPCMDecoder::Function80085600(unsigned char* ROM, int romSize, unsigned char* Buffer, unsigned long A0Param, unsigned long A1Param, unsigned long A2Param, unsigned long A3Param, unsigned long SPParam)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = A2Param;
	unsigned long A3 = A3Param;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = SPParam;

	SP = SP + (signed short)0xFFC8;
	T1 = A0;

	// TODO Write to stacks
	S1 = A1;
	S2 = A2;
	S0 = A3;

	A3 = 0;
	T0 = SP + 0x10;

	// RA to SP
	do
	{
		//8008562C
		V1 = A3 << 0x10;
		A1 = A3 + 1;
		A3 = A1;

		V1 = (int)V1 >> 0xF;
		V0 = V1 + S1;
		A2 = T0 + V1;
		V1 = V1 + T1;

		//80085648
		A1 = A1 << 0x10;
		A1 = (int)A1 >> 0x10;

		//80085654
		A1 = A1 < 0xA;
		A0 = CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);
		V0 = CharArrayToShort(&Buffer[V1 & 0xFFFFFF]);

		A0 = A0 << 0x10;
		A0 = (int)A0 >> 0x11;

		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x11;

		A0 = A0 + V0;
		WriteShortToBuffer(Buffer, A2, A0);
	} while (A1 != 0);

	//80085678
	A0 = SP + 0x10;
	A1 = S0;

	//8008567C
	Function80085890(ROM, romSize, Buffer, A0, A1, A2, SP);

	//80085684
	S0 = S0 + 0x16;

	A0 = S1;
	A1 = S0;

	//8008568C
	Function80085890(ROM, romSize, Buffer, A0, A1, A2, SP);

	//80085694
	S0 = S0 + 0x16;
	A3 = 0;

	T0 = SP + 0x10;
	do
	{
		//800856A0
		V1 = A3 << 0x10;
		A1 = A3 + 1;
		A3 = A1;
		V1 = (int)V1 >> 0xF;

		V0 = V1 + S1;
		A2 = T0 + V1;

		//800856B8
		V1 = V1 + S2;
		A1 = A1 << 0x10;
		A1 = (int)A1 >> 0x10;

		A1 = (int)A1 < 0xA;
		
		//800856C8
		A0 = CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);
		V0 = CharArrayToShort(&Buffer[V1 & 0xFFFFFF]);

		//800856D0
		A0 = A0 << 0x10;
		A0 = (int)A0 >> 0x11;

		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x11;

		A0 = A0 + V0;
		WriteShortToBuffer(Buffer, A2, A0);

		//800856E4
	} while (A1 != 0);

	//800856EC
	A0 = SP + 0x10;
	A1 = S0;

	//800856F0
	Function80085890(ROM, romSize, Buffer, A0, A1, A2, SP);

	A0 = S2;
	A1 = S0 + 0x16;

	//800856FC
	Function80085890(ROM, romSize, Buffer, A0, A1, A2, SP);

	// Load back RA etc
	SP = SP + 0x38;
}

void CKobe2ADPCMDecoder::Function80084EB0(unsigned char* ROM, int romSize, unsigned char* Buffer, unsigned long A0Param, unsigned long A1Param, unsigned long A2Param, unsigned long& V0, unsigned long SPParam)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = A2Param;
	unsigned long A3 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = SPParam;

	//80084EB0
	V1 = A1;
	A1 = A1 << 0x10;
	A1 = (int)A1 >> 0x10;

	V0 = 0x50;
	
	A3 = A0;
	//80084EC0
	if (A1 == V0)
	{
		V1 = 0;
	}

	//80084ECC
	V0 = V1 << 0x10;

	//80084ED0
	if (V0 != 0)
	{
		V0 = A3 << 0x10;

		//80084FA0 copied
		A0 = (int)V0 >> 0x10;

		V0 = (int)A0 < 0x3D;
		
		A0 = A0 + 5;
		if (V0 == 0)
		{
			//8008500C copied
			A0 = CharArrayToShort(&Buffer[0x80128894 & 0xFFFFFF]);

			WriteShortToBuffer(Buffer, A2, 0);
			WriteShortToBuffer(Buffer, 0x80128894, A0);
			V0 = A0 << 0x10;
			V0 = (int)V0 >> 0x10;

			return;
		}
		else
		{
			//80084FB0
			V1 = A0 << 2;
			V1 = V1 + A0;

			//80084FB8
			V1 = V1 << 2;
			V1 = V1 + A0;

			//80084FC0
			V0 = V1 << 6;
			V1 = V1 + V0;

			//80084FC8
			V1 = V1 << 2;
			V1 = V1 + A0;
			V1 = V1 + A0;

			//80084FD4
			V1 = (int)V1 >> 0xF;
			V1 = V1 - 1;

			A0 = V1 << 0x10;
			A0 = (int)A0 >> 0x10;

			V0 = A0 << 1;
			V0 = V0 + A0;

			//80084FF0
			V0 = V0 << 1;
			V0 = V0 + 3;

			A0 = CharArrayToShort(&Buffer[0x80128890 & 0xFFFFFF]);
			V0 = A3 - V0;

			WriteShortToBuffer(Buffer, A2, V0);
			
			A0 = A0 + V1;

			//80085018 Copied
			WriteShortToBuffer(Buffer, 0x80128894, A0);
			V0 = A0 << 0x10;
			V0 = (int)V0 >> 0x10;
			return;
		}
	}
	else
	{
		V0 = A3 << 0x10;
		A0 = (int)V0 >> 0x10;

		V0 = (int)A0 < 0x1CF;

		A0 = A0 + 5;
		//80084EE0
		if (V0 == 0)
		{
			// 80084F3C
			A0 = A3 + (signed short)0xFE90;
			WriteShortToBuffer(Buffer, A2, V1);
		}
		else
		{
			//80084EE8
			V0 = A0 << 2;
			V0 = V0 + A0;

			//80084EF0
			V0 = V0 << 2;
			V0 = V0 + A0;

			//80084EF8
			V1 = V0 << 6;
			V0 = V0 + V1;

			//80084F00
			V0 = V0 << 2;
			V0 = V0 + A0;
			V0 = V0 + A0;

			//80084F0C
			V0 = (int)V0 >> 0xF;
			V0 = V0 + 0x11;

			//80084F14
			A0 = V0;
			V0 = V0 << 0x10;
			V0 = (int)V0 >> 0x10;

			//80084F20
			V1 = V0 << 1;
			V1 = V1 + V0;
			V1 = V1 << 1;
			V1 = A3 - V1;
			V1 = V1 + 0x69;

			//80084F34
			WriteShortToBuffer(Buffer, A2, V1);
		}

		//80084F44
		V1 = 0x80128890;
		V0 = A0 + (signed short)0xFFFB;
		WriteShortToBuffer(Buffer, V1, V0);

		//80084F50
		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x10;

		V0 = (int)V0 < 0x12;

		if (V0 != 0)
		{
			V0 = 0x12;
			WriteShortToBuffer(Buffer, V1, V0);
		}

		//80084F68
		V0 = CharArrayToShort(&Buffer[V1 & 0xFFFFFF]);
		V0 = V0 + 9;

		WriteShortToBuffer(Buffer, 0x80128892, V0);

		//80084F78
		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x10;

		V0 = (int)V0 < 0x90;

		if (V0 != 0)
		{
			V0 = 0x80130000;
			
			//8008501C copied
			WriteShortToBuffer(Buffer, 0x80128894, A0);
			V0 = A0 << 0x10;
			V0 = (int)V0 >> 0x10;
			return;
		}

		//80084F8C
		V0 = 0x8F;
		WriteShortToBuffer(Buffer, 0x80128892, V0);

		//80084F94
		V0 = 0x86;
		WriteShortToBuffer(Buffer, 0x80128890, V0);

		// 80085018 copied
		WriteShortToBuffer(Buffer, 0x80128894, A0);
		V0 = A0 << 0x10;
		V0 = (int)V0 >> 0x10;
		return;
	}
}

void CKobe2ADPCMDecoder::Function80085BE0(unsigned char* ROM, int romSize, unsigned char* Buffer, unsigned long A0Param, unsigned long A1Param, unsigned long A2Param, unsigned long SPParam)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = A2Param;
	unsigned long A3 = 0;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = SPParam;

	//80085BE0
	T8 = A0;
	A1 = A1 << 0x10;
	A1 = (int)A1 >> 0xF;
	T5 = T8 - A1;
	A2 = -A2;
	V0 = A2 << 0x10;
	
	A0 = A2;
	//80085BF8
	if ((int)V0 < 0)
	{
		A0 = A2 + 6;
		T5 = T5 + (signed short)0xFFFE;
	}

	//80085C08
	T4 = 0;
	A0 = A0 << 0x10;
	A0 = (int)A0 >> 0x10;

	V0 = A0 << 1;
	V1 = 0x800F2610;

	//80085C20
	T7 = V0 + V1;
	V0 = 6;
	V0 = V0 - A0;
	V0 = V0 << 1;

	//80085C30
	T6 = V0 + V1;
	T3 = T5;

	do
	{
		//80085C38
		T2 = T3 + 2;
		T5 = T2;

		//80085C40
		A3 = 0;
		T1 = A3;
		T0 = A3;
		
		do
		{
			//80085C4C
			V1 = T1 << 0x10;
			V1 = (int)V1 >> 0x10;

			//80085C54
			A0 = V1 << 1;
			A0 = T3 - A0;

			//80085C5C
			V0 = T0 << 0x10;
			V0 = (int)V0 >> 0xF;

			A1 = V0 + T7;

			//80085C68
			A2 = (signed short)CharArrayToShort(&Buffer[A0 & 0xFFFFFF]);
			A0 = (signed short)CharArrayToShort(&Buffer[A1 & 0xFFFFFF]);

			A0 = A2 * A0;
			V1 = V1 << 1;
			V1 = V1 + T2;

			//80085C7C
			V0 = V0 + T6;
			V1 = (signed short)CharArrayToShort(&Buffer[V1 & 0xFFFFFF]);

			//80085C88
			V0 = (signed short)CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);
			T0 = T0 + 6;

			V1 = V1 * V0;
			V0 = T1 + 1;

			//80085C98
			T1 = V0;
			A3 = A3 + A0;

			V0 = V0 << 0x10;
			V0 = (int)V0 >> 0x10;

			V0 = (int)V0 < 0xA;
			A3 = A3 + V1;
			//80085CB0
		} while (V0 != 0);

		//80085CB8
		V1 = T4 << 0x10;
		V1 = (int)V1 >> 0xF;

		//80085CC0
		V1 = V1 + T8;
		V0 = A3 + 0x4000;
		V0 = (int)V0 >> 0xF;

		WriteShortToBuffer(Buffer, V1, V0);

		//80085CD0
		V0 = T4 + 1;
		T4 = V0;

		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x10;

		V0 = (int)V0 < 0x28;
		T3 = T5;
		//80085CE4
	} while (V0 != 0);
}

void CKobe2ADPCMDecoder::Function80085220(unsigned char* ROM, int romSize, unsigned char* Buffer, unsigned long A0Param, unsigned long& V0)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = 0;
	unsigned long A2 = 0;
	unsigned long A3 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;

	V0 = 0x800F05D0;
	A0 = A0 << 0x10;
	A0 = (int)A0 >> 0xF;

	A0 = A0 + V0;
	
	//80085230
	V0 = CharArrayToShort(&Buffer[A0 & 0xFFFFFF]);

	V0 = V0 << 0x10;
	V0 = (int)V0 >> 0x12;
}

void CKobe2ADPCMDecoder::Function80084DB0(unsigned char* ROM, int romSize, unsigned char* Buffer, unsigned long A0Param, unsigned long A1Param, unsigned long SPParam)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = 0;
	unsigned long A3 = 0;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = SPParam;

	//80084DB0
	T2 = A0;
	V1 = 0;

	V0 = V1 << 0x10;

	//80084DBC
	int V0Check = 0;
	do
	{
		V0 = (int)V0 >> 0xF;
		V0 = V0 + A1;

		//80084DC4
		WriteShortToBuffer(Buffer, V0, 0);
		V0 = V1 + 1;
		V1 = V0;

		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x10;

		V0 = (int)V0 < 0x28;

		V0Check = (V0 != 0);
		if (V0Check)
		{
			V0 = V1 << 0x10;
		}
	} while (V0Check != 0);

	//80084DE4
	A3 = 0;
	T1 = 0x800F05C0;

	do
	{
		//80084DF0
		V0 = A3 << 0x10;
		V0 = (int)V0 >> 0xF;

		//80084DF8
		T0 = V0 + T2;
		A0 = CharArrayToShort(&Buffer[T0 & 0xFFFFFF]);

		//80084E00
		A2 = (signed short)0xF000;

		V0 = A0 & 7;
		V0 = V0 << 1;
		V0 = V0 + T1;

		//80084E10
		A0 = A0 >> 3;
		V1 = CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);

		//80084E18
		A0 = A0 & 1;
		V0 = V1 << 2;
		V0 = V0 + V1;

		V0 = V0 + A3;

		//80084E24
		if (A0 == 0)
		{
			A2 = 0x1000;
		}

		//80084E30
		A0 = V0 << 0x10;
		A0 = (int)A0 >> 0x10;
		V0 = A0 << 1;
		V0 = V0 + A1;

		//80084E40
		WriteShortToBuffer(Buffer, V0, A2);
		V0 = CharArrayToShort(&Buffer[(T0 & 0xFFFFFF) + 0xA]);
		V0 = V0 & 7;

		V0 = V0 << 1;
		V0 = V0 + T1;

		//80084E54
		V1 = CharArrayToShort(&Buffer[(V0 & 0xFFFFFF)]);
		V0 = V1 << 2;

		V0 = V0 + V1;
		V0 = V0 + A3;

		//80084E64
		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x10;

		A0 = (int)V0 < (int)A0;

		//80084E70
		if (A0 != 0)
		{
			A2 = -A2;
		}

		//80084E78
		V0 = V0 << 1;
		V0 = V0 + A1;
		V1 = A3 + 1;
		A3 = V1;

		//80084E88
		V1 = V1 << 0x10;
		V1 = (int)V1 >> 0x10;

		A0 = CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);
		V1 = (int)V1 < 5;

		A0 = A0 + A2;
		WriteShortToBuffer(Buffer, V0, A0);
	} while (V1 != 0);
}

void CKobe2ADPCMDecoder::Function80084D00(unsigned char* ROM, int romSize, unsigned char* Buffer, unsigned long A0Param, unsigned long& V0)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = 0;
	unsigned long A2 = 0;
	unsigned long A3 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;

	//80084D00
	if (A0 != 0)
	{
		V0 = (signed short)0xFFFF;

		//80084D10
		V1 = 0x1F;
		if (A0 == V0)
		{
			V0 = V1 << 0x10;
			V0 = (int)V0 >> 0x10;
			return;
		}
		else
		{
			if (A0 < 0)
			{
				// NOR
				A0 = ~(0|A0);
			}

			//80084D20
			V0 = 0x3FFFFFFF;
			V0 = (int)V0 < (int)A0;

			V1 = 0;
			if (V0 != 0)
			{
				V1 = 0;
				V0 = V1 << 0x10;
				V0 = (int)V0 >> 0x10;
				return;
			}
	
			//80084D34
			A1 = 0x3FFFFFFF;

			do
			{
				A0 = A0 << 1;
				V0 = (int)A1 < (int)A0;

				V1 = V1 + 1;
			} while (V0 == 0);

			V0 = V1 << 0x10;
			V0 = (int)V0 >> 0x10;
		}
	}
	else
	{
		V1 = 0;
		V0 = V1 << 0x10;
		V0 = (int)V0 >> 0x10;
		return;
	}
}

void CKobe2ADPCMDecoder::Function800857D0(unsigned char* ROM, int romSize, unsigned char* Buffer, unsigned long A0Param, unsigned long A1Param, unsigned long A2Param, unsigned long A3Param, unsigned long SPParam)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = A2Param;
	unsigned long A3 = 0;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = SPParam;

	//800857D0
	SP = SP + (signed short)0xFFE0;
	// Stored to stack
	S0 = A0;
	S1 = A1;
	S2 = A2;
	// Store RA to stack
	if (S0 > 0)
	{
		//80085800
		A0 = S0;
		Function80084D00(ROM, romSize, Buffer, A0, V0);
		
		//80085808
		S0 = S0 << V0;
		A3 = 0x1E;
		A0 = (int)S0 >> 0x19;
		V1 = 0x800F24E0;
		A0 = A0 + (signed short)0xFFE0;

		//80085820
		A2 = A0 << 1;
		A2 = A2 + V1;
		
		//80085828
		A0 = A0 + 1;
		A0 = A0 << 1;
		A0 = A0 + V1;

		//80085834
		A1 = CharArrayToShort(&Buffer[A0 & 0xFFFFFF]);
		A0 = (int)S0 >> 0xA;

		V1 = CharArrayToShort(&Buffer[A2 & 0xFFFFFF]);
		A0 = A0 & 0x7FFF;

		V1 = V1 - A1;
		V1 = V1 << 0x10;
		V1 = (int)V1 >> 0x10;

		//80085850
		T0 = V1 * A0;
		V1 = (signed short)CharArrayToShort(&Buffer[A2 & 0xFFFFFF]);

		A3 = A3 - V0;
		WriteShortToBuffer(Buffer, S1, A3);

		//80085860
		V1 = V1 << 0xF;
		V1 = V1 - T0;
		V1 = (int)V1 >> 0xF;

		WriteShortToBuffer(Buffer, S2, V1);
		
		SP = SP + 0x20;
	}
	else
	{
		WriteShortToBuffer(Buffer, S1, 0);
		WriteShortToBuffer(Buffer, S2, 0);
		return;

	}
}

void CKobe2ADPCMDecoder::Function80085B70(unsigned char* ROM, int romSize, unsigned char* Buffer, unsigned long A0Param, unsigned long A1Param, unsigned long A2Param, unsigned long& V0, unsigned long SPParam)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = A2Param;
	unsigned long A3 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = SPParam;

	//80085B70
	V1 = A1 << 0x10;
	V0 = 0x800F25C0;
	V1 = (int)V1 >> 0x1A;
	A2 = V1 << 1;
	A2 = A2 + V0;

	V1 = V1 + 1;
	V1 = V1 << 1;
	V1 = V1 + V0;
	A1 = A1 << 5;

	//80085B98
	V0 = CharArrayToShort(&Buffer[A2 & 0xFFFFFF]);
	V1 = CharArrayToShort(&Buffer[V1 & 0xFFFFFF]);

	A1 = A1 & 0x7FE0;

	//80085BA4
	V0 = V0 - V1;
	V0 = V0 << 0x10;
	V0 = (int)V0 >> 0x10;

	A3 = V0 * A1;
	V0 = CharArrayToShort(&Buffer[A2 & 0xFFFFFF]);
	V0 = V0 << 0x10;

	//80085BC0
	V1 = A3 << 1;
	V0 = V0 - V1;
	V1 = 0x1D;

	V1 = V1 - A0;
	V0 = (int)V0 >> V1;
	V0 = V0 + 1;
	V0 = (int)V0 >> 1;
}

void CKobe2ADPCMDecoder::Function80085030(unsigned char* ROM, int romSize, unsigned char* Buffer, unsigned long A0Param, unsigned long A1Param, unsigned long A2Param, unsigned long A3Param, unsigned long SPParam)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = A2Param;
	unsigned long A3 = A3Param;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = SPParam;

	//80085030
	SP = SP + (signed short)0xFFD8;
	//TODO Backup S registers
	S1 = A2;
	S0 = A0;
	A0 = 0;
	A2 = A0;
	// Store RA
	do
	{
		V0 = A2 << 0x10;
		V0 = (int)V0 >> 0xF;
		V0 = V0 + A1;

		//8008505C
		V0 = (signed short)CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);

		T1 = V0 * V0;
		V0 = A2 + 1;
		A2 = V0;

		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x10;

		V0 = (int)V0 < 0x28;
		A0 = A0 + T1;
		//8008507C
	} while (V0 != 0);

	//80085084
	V0 = A0 + 0x4000;
	V0 = (int)V0 >> 0xF;

	//8008508C
	A0 = V0 << 1;
	A0 = A0 + V0;

	//80085094
	V0 = A0 << 4;
	A0 = A0 + V0;

	//8008509C
	V0 = A0 << 8;
	A0 = A0 + V0;

	//800850A4
	A0 = A0 << 2;
	A1 = SP + 0x10;
	A2 = SP + 0x12;

	//800850AC
	Function800857D0(ROM, romSize, Buffer, A0, A1, A2, A3, SP);
	//800850B4

	A1 = 0xBF57D;
	A2 = 0;
	T0 = 0x801288A0;
	A3 = 0x801288A8;

	V1 = (signed short)CharArrayToShort(&Buffer[(SP & 0xFFFFFF) + 0x10]);
	V0 = (signed short)CharArrayToShort(&Buffer[(SP & 0xFFFFFF) + 0x12]);

	//800850D8
	V1 = V1 + (signed short)0xFFE2;
	V1 = V1 << 0x10;
	V0 = V0 << 1;
	A0 = V1 + V0;
	do
	{
		//800850E8
		V0 = A2 << 0x10;
		V0 = (int)V0 >> 0xF;
		V1 = V0 + T0;
		V0 = V0 + A3;

		//800850F8
		V1 = (signed short)CharArrayToShort(&Buffer[V1 & 0xFFFFFF]);
		V0 = (signed short)CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);

		T1 = V1 * V0;
		V0 = A2 + 1;
		A2 = V0;

		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x10;

		V0 = (int)V0 < 4;
		V1 = T1 << 1;
		A1 = A1 + V1;
	} while (V0 != 0);

	//80085128
	V0 = A1 - A0;
	A0 = (int)V0 >> 0x11;
	V0 = (int)V0 >> 2;

	V1 = A0 << 0xF;
	V0 = V0 - V1;

	A1 = V0 << 0x10;
	A1 = (int)A1 >> 0x10;

	WriteShortToBuffer(Buffer, SP + 0x10, A0);
	WriteShortToBuffer(Buffer, SP + 0x12, V0);

	//80085148
	Function80085B70(ROM, romSize, Buffer, A0, A1, A2, V0, SP);

	//80085150
	A0 = 0x800F05F0;
	V1 = S0 << 0x10;
	V1 = (int)V1 >> 0xF;
	V1 = V1 + A0;

	V0 = V0 << 0x10;
	V1 = (signed short)CharArrayToShort(&Buffer[V1 & 0xFFFFFF]);
	V0 = (int)V0 >> 0x10;

	T1 = V1 * V0;
	A2 = 3;
	A1 = 0x801288A0;

	//80085184
	V0 = (int)T1 >> 0xB;
	WriteShortToBuffer(Buffer, S1, V0);
	do
	{
		//800851B8
		V0 = A2 << 0x10;

		A0 = A2 - 1;
		A2 = A0;

		//80085198
		V0 = (int)V0 >> 0x10;
		V1 = V0 << 1;
		V0 = V0 - 1;

		V0 = V0 << 1;
		V0 = V0 + A1;

		V1 = V1 + A1;

		//800851B0
		V0 = CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);
		A0 = A0 << 0x10;

		WriteShortToBuffer(Buffer, V1, V0);
		//800851B8
	} while (A0 > 0);

	//800851C0
	A1 = SP + 0x10;
	V1 = 0x800F05F0;
	V0 = S0 << 0x10;
	V0 = (int)V0 >> 0xF;

	V0 = V0 + V1;
	A0 = CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);
	A2 = SP + 0x12;

	//800851DC
	Function800857D0(ROM, romSize, Buffer, A0, A1, A2, A3, SP);

	//800851E4
	V0 = CharArrayToShort(&Buffer[(SP & 0xFFFFFF) + 0x12]);
	V1 = CharArrayToShort(&Buffer[(SP & 0xFFFFFF) + 0x10]);

	// TODO Restore stack
	V0 = V0 << 0x10;
	V0 = (int)V0 >> 0x15;
	V1 = V1 + (signed short)0xFFF5;
	V1 = V1 << 0xA;
	WriteShortToBuffer(Buffer, 0x801288A0, V0);
	V0 = V0 + V1;
	WriteShortToBuffer(Buffer, 0x801288A0, V0);

	SP = SP + 0x28;
}

void CKobe2ADPCMDecoder::Function80085720(unsigned char* ROM, int romSize, unsigned char* Buffer, unsigned long A0Param, unsigned long A1Param, unsigned long A2Param, unsigned long& V0, unsigned long SPParam)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = A2Param;
	unsigned long A3 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = SPParam;

	SP = SP + (signed short)0xFFE8;

	S0 = A0;

	if (S0 > 0)
	{
		A0 = S0;

		//80085740
		Function80084D00(ROM, romSize, Buffer, A0, V0);

		//80085748
		S0 = S0 << V0;
		V1 = 0x1E;

		A2 = V1 - V0;
		V0 = A2 & 1;

		//80085758
		if (V0 == 0)
		{
			S0 = (int)S0 >> 1;
		}

		V1 = (int)S0 >> 0x19;
		V0 = 0x800F2470;

		V1 = V1 + (signed short)0xFFF0;

		//80085770
		A1 = V1 << 1;
		A1 = A1 + V0;
		V1 = V1 + 1;
		V1 = V1 << 1;

		V1 = V1 + V0;
		A0 = CharArrayToShort(&Buffer[V1 & 0xFFFFFF]);
		V1 = (int)S0 >> 0xA;

		V0 = CharArrayToShort(&Buffer[A1 & 0xFFFFFF]);

		V1 = V1 & 0x7FFF;
		V0 = V0 - A0;

		//80085798
		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x10;

		A3 = V0 * V1;
		V0 = CharArrayToShort(&Buffer[A1 & 0xFFFFFF]);

		V1 = (int)A2 >> 1;
		V0 = V0 << 0xF;

		//800857B4
		V0 = V0 - A3;
		V0 = (int)V0 >> V1;

		//800857BC
	}
	else
	{
		V0 = 0x3FFFFFFF;
		return;
	}
}

void CKobe2ADPCMDecoder::Function80084B2C(unsigned char* ROM, int romSize, unsigned char* Buffer, unsigned long A0Param, unsigned long A1Param, unsigned long A2Param, unsigned long SPParam)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = A2Param;
	unsigned long A3 = 0;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = SPParam;

	SP = SP + 0xFFD8;
	// Backup registers
	S4 = A0;
	S2 = A1;
	S0 = 0;
	A1 = S0;

	do
	{
		//80084B58
		V0 = A1 << 0x10;
		V0 = (int)V0 >> 0xF;
		V0 = V0 + S2;

		//80084B64
		V0 = CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);
		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x12;

		A3 = V0 * V0;
		V0 = A1 + 1;
		A1 = V0;

		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x10;

		V0 = (int)V0 < 0x28;

		S0 = S0 + A3;
	//80084B8C
	} while (V0 != 0);

	//80084B94
	if (S0 == 0)
	{
		S0 = S0 << 1;
		return;
	}
	else
	{
		S0 = S0 << 1;
	}

	A0 = S0;
	//80084B9C
	Function80084D00(ROM, romSize, Buffer, A0, V0);

	//80084BA4
	V0 = V0 - 1;
	S3 = V0;

	V0 = S0 << V0;
	V1 = 0x8000;
	V0 = V0 + V1;
	S1 = (int)V0 >> 0x10;

	//80084BBC
	S0 = 0;
	A1 = S0;
	do
	{
		//80084BC4
		V0 = A1 << 0x10;
		V0 = (int)V0 >> 0xF;
		V0 = V0 + S4;

		//80084BD0
		V0 = CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);
		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x12;
		
		A3 = V0 * V0;
		V0 = A1 + 1;
		A1 = V0;

		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x10;

		V0 = (int)V0 < 0x28;
		S0 = S0 + A3;
		//80084BF8
	} while (V0 != 0);

	//80084C00
	if (S0 != 0)
	{
		S0 = S0 << 1;

		//80084C10
		A0 = S0;
		Function80084D00(ROM, romSize, Buffer, A0, V0);

		A1 = V0;
		V1 = S0 << A1;
		V0 = 0x8000;

		//80084C24
		V1 = V1 + V0;
		V0 = S1 << 0x10;
		V0 = (int)V0 >> 1;
		V1 = (int)V1 >> 0x10;

		S0 = V0 / V1;

		//80084C60
		V0 = S3 - A1;
		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x10;

		S0 = S0 << 7;
		if ((int)V0 < 0)
		{
			V0 = -V0;	

			S0 = S0 << V0;
		}
		else
		{
			S0 = (int)S0 << 7;
		}

		//80084C84
		A0 = S0;
		Function80085720(ROM, romSize, Buffer, A0, A1, A2, V0, SP);

		//80084C8C
		V0 = V0 + 0x40;
		V0 = (int)V0 >> 7;
	}
	else
	{
		V0 = 0;
	}

	//80084C94
	A1 = 0;
	V0 = V0 << 0x10;
	A2 = (int)V0 >> 0x10;

	do
	{
		//80084CA0
		A0 = A1 << 0x10;
		A0 = (int)A0 >> 0xF;
		
		//80084CA8
		A0 = A0 + S2;
		V0 = (signed short)CharArrayToShort(&Buffer[A0 & 0xFFFFFF]);

		A3 = V0 * A2;
		V0 = A1 + 1;
		A1 = V0;

		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x10;
		V0 = (int)V0 < 0x28;

		V1 = (int)A3 >> 0xC;
		WriteShortToBuffer(Buffer, A0, V1);
	} while (V0 != 0);



}

void CKobe2ADPCMDecoder::Function800861D0(unsigned char* ROM, int romSize, unsigned char* Buffer, unsigned long A0Param, unsigned long A1Param, unsigned long A2Param, unsigned long A3Param, unsigned long SPParam)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = A2Param;
	unsigned long A3 = A3Param;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = SPParam;

	//800861D0

	SP = SP + (signed short)0xFF60;
	T3 = SP;
	T2 = 0;

	//800861DC
	T5 = CharArrayToLong(&Buffer[(SP + 0xB0) & 0xFFFFFF]);
	T6 = CharArrayToShort(&Buffer[(SP + 0xB6) & 0xFFFFFF]);

	do
	{
		//800861E4
		V0 = T2 << 0x10;
		V0 = (int)V0 >> 0xF;

		V0 = V0 + T5;
		V1 = T2 + 1;
		T2 = V1;

		//800861F4
		V1 = V1 << 0x10;
		V1 = (int)V1 >> 0x10;

		V0 = CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);
		V1 = (int)V1 < 0xA;

		WriteShortToBuffer(Buffer, T3, V0);
		T3 = T3 + 2;
	} while (V1 != 0);

	//80086214
	V0 = A3 << 0x10;
	V0 = (int)V0 >> 0x10;

	T2 = 0;
	if (V0 > 0)
	{
		//80086224
		T4 = V0;

		do
		{
			//80086228
			V0 = T2 << 0x10;
			V0 = (int)V0 >> 0xF;
			V0 = V0 + A1;

			V1 = CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);
			V0 = CharArrayToShort(&Buffer[A0 & 0xFFFFFF]);

			//8008623C
			T0 = 1;
			T1 = V1 * V0;

			do
			{
				//80086248
				V0 = T0 << 0x10;
				V0 = (int)V0 >> 0x10;
				V1 = V0 << 1;
				V1 = V1 + A0;
				V0 = V0 << 1;
				V0 = T3 - V0;

				//80086260
				V1 = (signed short)CharArrayToShort(&Buffer[V1 & 0xFFFFFF]);
				V0 = (signed short)CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);

				//80086268
				T7 = V1 * V0;
				V0 = T0 + 1;
				T0 = V0;

				V0 = V0 << 0x10;
				V0 = (int)V0 >> 0x10;

				V0 = (int)V0 < 0xB;
				T1 = T1 - T7;
			} while (V0 != 0);

			//8008628C
			V0 = T1 + 0x0800;
			V0 = (int)V0 >> 0xC;
			WriteShortToBuffer(Buffer, T3, V0);

			//80086298
			V0 = T2 + 1;
			T2 = V0;

			V0 = V0 << 0x10;
			V0 = (int)V0 >> 0x10;

			V0 = (int)V0 < (int)T4;
			T3 = T3 + 2;
		} while (V0 != 0);
	}

	//800862B4
	V0 = A3 << 0x10;
	V0 = (int)V0 >> 0x10;
	T2 = 0;

	if (V0 > 0)
	{
		//800862C4
		A1 = V0;
		do
		{
			//800862C8
			V0 = T2 << 0x10;
			V1 = T2 + 1;
			T2 = V1;

			//800862C4
			V0 = (int)V0 >> 0x10;
			A0 = V0 << 1;
			V0 = V0 + 0xA;

			V0 = V0 << 1;
			V0 = SP + V0;
			A0 = A0 + A2;

			//800862EC
			V1 = V1 << 0x10;
			V1 = (int)V1 >> 0x10;

			V0 = CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);
			V1 = (int)V1 < (int)A1;

			WriteShortToBuffer(Buffer, A0, V0);
		} while (V1 != 0);
	}

	//80086304
	V0 = T6 << 0x10;
	if (V0 == 0)
	{
		return;
	}
	else
	{
		//80086310
		T2 = 0;
		V0 = A3 << 0x10;
		A1 = (int)V0 >> 0x10;

		do
		{
			//8008631C
			V0 = T2 << 0x10;
			V1 = T2 + 1;

			//80086324
			T2 = V1;
			V0 = (int)V0 >> 0x10;
			A0 = V0 << 1;
			V0 = V0 + A1;

			V0 = V0 << 1;
			//80086338
			V0 = V0 + A2;
			A0 = A0 + T5;

			//80086340
			V1 = V1 << 0x10;
			V1 = (int)V1 >> 0x10;

			//80086348
			V0 = CharArrayToShort(&Buffer[(V0 & 0xFFFFFF) + (signed short)0xFFEC]);
			V1 = (int)V1 < 0xA;

			//FILE* a = fopen("C:\\temp\\output.bin", "ab");
			//WriteShortToFile(a, V0);
			//fflush(a);
			//fclose(a);

			// Predictor
			WriteShortToBuffer(Buffer, A0, V0);
		} while (V1 != 0);
	}
}

void CKobe2ADPCMDecoder::Function80084D60(unsigned char* ROM, int romSize, unsigned char* Buffer, std::vector<unsigned short>& pcmSamples, unsigned long A0Param, unsigned long A1Param, unsigned long A2Param)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = A2Param;
	unsigned long A3 = 0;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;

	T0 = A0;
	A2 = A2 << 0x10;
	A2 = (int)A2 >> 0x10;
	A3 = 0;

	if (A2 <= 0)
	{
		return;
	}

	do
	{
		//80084D74
		A0 = A3 << 0x10;
		V1 = A3 + 1;
		A3 = V1;

		A0 = (int)A0 >> 0xF;
		V0 = A0 + T0;
		
		//80084D88
		A0 = A0 + A1;
		V1 = V1 << 0x10;
		V1 = (int)V1 >> 0x10;

		V0 = CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);
		V1 = (int)V1 < (int)A2;

		WriteShortToBuffer(Buffer, A0, V0);
	} while (V1 != 0);
}

void CKobe2ADPCMDecoder::Function80084400(unsigned char* ROM, int romSize, unsigned char* Buffer, std::vector<unsigned short>& pcmSamples, unsigned long A0Param, unsigned long A1Param, unsigned long A2Param, unsigned long SPParam)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = A2Param;
	unsigned long A3 = 0;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = SPParam;

	SP = SP + (signed short)0xFEE8;
	
	WriteLongToBuffer(Buffer, SP + 0xF8, S2);
	S2 = A0;
	WriteLongToBuffer(Buffer, SP + 0xFC, S3);
	S3 = A2;
	WriteLongToBuffer(Buffer, SP + 0xF4, S1);
	S1 = SP + 0x30;
	WriteLongToBuffer(Buffer, SP + 0x11C, A1);
	A1 = S1;
	A2 = SP + 0x18;
	// RA to 114(SP)
	WriteLongToBuffer(Buffer, SP + 0x110, S8);
	WriteLongToBuffer(Buffer, SP + 0x10C, S7);
	WriteLongToBuffer(Buffer, SP + 0x108, S6);
	WriteLongToBuffer(Buffer, SP + 0x104, S5);
	WriteLongToBuffer(Buffer, SP + 0x100, S4);

	//80084440
	Function80085370(ROM, romSize, Buffer, A0, A1, A2, SP);

	//80084448
	S2 = S2 + 0xA;
	S0 = 0x80128840;

	A0 = S0;
	A1 = S1;

	A2 = SP + 0x18;
	A3 = S3;

	//80084460
	Function80085600(ROM, romSize, Buffer, A0, A1, A2, A3, SP);

	//80084468

	A2 = 0;
	A1 = SP + 0x18;

	do
	{
		//80084470
		A0 = A2 << 0x10;
		V1 = A2 + 1;

		//80084478
		A2 = V1;
		A0 = (int)A0 >> 0xF;

		V0 = A1 + A0;
		A0 = A0 + S0;

		V1 = V1 << 0x10;
		V1 = (int)V1 >> 0x10;

		//80084490
		V0 = CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);
		V1 = (int)V1 < 0xA;
		WriteShortToBuffer(Buffer, A0, V0);
	} while (V1 != 0);

	//800844A0
	S8 = S3;
	S4 = 0;
	S7 = SP + 0x48;
	S6 = SP + 0x98;

	do
	{
		//800844B0
		A0 = CharArrayToShort(&Buffer[S2 & 0xFFFFFF]);
		S2 = S2 + 2;

		S0 = S4 << 0x10;
		S0 = (int)S0 >> 0x10;

		//800844C0
		A1 = S0;
		A2 = SP + 0xE8;

		//800844C8
		A0 = A0 << 0x10;
		A0 = (int)A0 >> 0x10;

		//800844CC
		Function80084EB0(ROM, romSize, Buffer, A0, A1, A2, V0, SP);

		//800844D4
		S3 = V0;
		V0 = S3 << 0x10;
		S1 = (int)V0 >> 0x10;

		//800844E0
		A1 = S1;
		S0 = S0 << 1;

		A0 = CharArrayToLong(&Buffer[0x80128834 & 0xFFFFFF]);
		A2 = CharArrayToShort(&Buffer[(SP & 0xFFFFFF) + 0xE8]);

		A0 = A0 + S0;

		//800844F4
		Function80085BE0(ROM, romSize, Buffer, A0, A1, A2, SP);

		//800844FC
		A0 = CharArrayToShort(&Buffer[S2 & 0xFFFFFF]);
		S2 = S2 + 2;

		A0 = A0 << 0x10;
		A0 = (int)A0 >> 0x10;

		//80084508
		Function80085220(ROM, romSize, Buffer, A0, V0);

		//80084510
		A0 = S2;
		A1 = SP + 0x48;
		S5 = V0;

		//80084518
		Function80084DB0(ROM, romSize, Buffer, A0, A1, SP);

		//80084520
		V0 = S5 << 0x10;
		V1 = (int)V0 >> 0xD;

		V0 = 0x7FFF;

		//8008452C
		V0 = (int)V0 < (int)V1;
		S2 = S2 + 0x14;

		//80084530
		if (V0 != 0)
		{
			V1 = 0x7FFF;
		}

		//8008453C
		A2 = S3;

		V0 = (int)S1 < 0x28;
		
		S3 = V1;
		//80084544
		if (V0 != 0)
		{
			T0 = S1;
			V0 = V1 << 0x10;
			A3 = (int)V0 >> 0x10;

			do
			{
				//80084558
				A1 = A2 << 0x10;
				A1 = (int)A1 >> 0x10;

				//80084560
				V0 = A1 - T0;
				V0 = V0 << 1;

				V0 = S7 + V0;
				A0 = A2 + 1;
				A2 = A0;
				A1 = A1 << 1;

				//80084574
				V0 = (signed short)CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);
				A1 = S7 + A1;

				T3 = V0 * A3;
				A0 = A0 << 0x10;
				A0 = (int)A0 >> 0x10;

				A0 = (int)A0 < 0x28;
				V0 = (signed short)CharArrayToShort(&Buffer[A1 & 0xFFFFFF]);

				//80084598
				V1 = (int)T3 >> 0xF;
				V0 = V0 + V1;
				WriteShortToBuffer(Buffer, A1, V0);
				//800845A0
			} while (A0 != 0);
		}

		//800845A8
		V0 = S3 << 0x10;
		V1 = (int)V0 >> 0x10;

		V0 = (int)V1 < 0x4001;
		A2 = 0;

		//800845B4
		if (V0 == 0)
		{
			V0 = S4 << 0x10;
			T2 = (int)V0 >> 0x10;

			T1 = CharArrayToLong(&Buffer[0x80128834 & 0xFFFFFF]);
			T0 = V1;

			//800845D0
			V0 = S5 << 0x10;
			A3 = (int)V0 >> 0x10;

			do
			{
				//800845D8
				A0 = A2 << 0x10;
				A0 = (int)A0 >> 0x10;

				//800845E0
				V0 = A0 + T2;
				V0 = V0 << 1;

				//800845E8
				V0 = V0 + T1;
				V0 = (signed short)CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);

				V1 = V0 * T0;
				A0 = A0 << 1;
				A0 = S6 + A0;

				//80084600
				V0 = V1 << 1;
				V0 = (int)V0 >> 0x10;

				V1 = A2 + 1;
				A1 = V0 * A3;

				A2 = V1;
				V1 = V1 << 0x10;
				V1 = (int)V1 >> 0x10;

				V1 = (int)V1 < 0x28;

				V0 = A1 + 0x2000;
				V0 = (int)V0 >> 0xE;
				WriteShortToBuffer(Buffer, A0, V0);
				//8008462C
			} while (V1 != 0);
		}

		//80084634
		A0 = CharArrayToShort(&Buffer[S2 & 0xFFFFFF]);
		S2 = S2 + 2;
		A1 = SP + 0x48;
		A2 = SP + 0xEA;

		//80084644
		S0 = S4 << 0x10;
		S0 = (int)S0 >> 0x10;

		A3 = S0;
		A0 = A0 << 0x10;
		A0 = (int)A0 >> 0x10;

		//80084654
		Function80085030(ROM, romSize, Buffer, A0, A1, A2, A3, SP);

		//8008465C
		A2 = 0;
		V0 = S5 << 0x10;
		T1 = (int)V0 >> 0x10;

		T0 = CharArrayToLong(&Buffer[0x80128834 & 0xFFFFFF]);
		A3 = CharArrayToShort(&Buffer[(SP & 0xFFFFFF) + 0xEA]);

		do
		{
			//80084674
			V0 = A2 << 0x10;
			V0 = (int)V0 >> 0x10;

			A0 = V0 + S0;
			A0 = A0 << 1;
			A0 = A0 + T0;

			//80084688
			V1 = (signed short)CharArrayToShort(&Buffer[A0 & 0xFFFFFF]);
			A1 = V1 * T1;
			V0 = V0 << 1;
			V0 = S7 + V0;

			//8008469C
			V0 = (signed short)CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);
			V1 = A2 + 1;
			T2 = V0 * A3;
			A2 = V1;
			V1 = V1 << 0x10;
			V1 = (int)V1 >> 0x10;

			V1 = (int)V1 < 0x28;
			A1 = A1 + T2;

			V0 = A1 + 0x0800;
			V0 = (int)V0 >> 0xC;
			WriteShortToBuffer(Buffer, A0, V0);
		} while (V1 != 0);

		//800846D0
		V0 = S3 << 0x10;
		V0 = (int)V0 >> 0x10;

		V0 = (int)V0 < 0x4001;
		A0 = S8;

		if (V0 != 0)
		{
			//80084784
			V1 = S4 << 0x10;
			V1 = (int)V1 >> 0xF;

			A3 = 0x28;
			T3 = CharArrayToLong(&Buffer[(SP & 0xFFFFFF) + 0x11C]);
			V0 = 0x80128860;

			//8008479C
			WriteLongToBuffer(Buffer, (SP + 10), V0);

			A2 = T3 + V1;
			A1 = CharArrayToLong(&Buffer[0x80128834 & 0xFFFFFF]);

			V0 = 1;
			WriteLongToBuffer(Buffer, SP + 0x14, V0);
			//800847B4
			A1 = A1 + V1;
		}
		else
		{
			A2 = 0;
			V0 = S4 << 0x10;
			T0 = (int)V0 >> 0x10;
			A3 = CharArrayToLong(&Buffer[0x80128834 & 0xFFFFFF]);

			do
			{
				//800846F8
				V0 = A2 << 0x10;
				V0 = (int)V0 >> 0x10;
				A1 = V0 << 1;

				A1 = S6 + A1;
				V0 = V0 + T0;

				//8008470C
				V0 = V0 << 1;
				V0 = V0 + A3;
				V1 = A2 + 1;
				A2 = V1;

				//8008471C
				V1 = V1 << 0x10;
				V1 = (int)V1 >> 0x10;

				//80084724
				A0 = CharArrayToShort(&Buffer[A1 & 0xFFFFFF]);
				V0 = CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);

				V1 = (int)V1 < 0x28;
				A0 = A0 + V0;
				WriteShortToBuffer(Buffer, A1, A0);
				//80084734
			}
			while (V1 != 0);

			//8008473C
			A1 = S6;
			S0 = S4 << 0x10;

			A0 = CharArrayToLong(&Buffer[0x80128834 & 0xFFFFFF]);
			S0 = (int)S0 >> 0xF;
			A0 = A0 + S0;

			//80084750
			Function80084B2C(ROM, romSize, Buffer, A0, A1, A2, SP);

			//80084758
			A0 = S8;
			A1 = S6;

			A3 = 0x28;
			T3 = CharArrayToLong(&Buffer[((SP & 0xFFFFFF) + 0x11C)]);

			V0 = 0x80128860;
			WriteLongToBuffer(Buffer, SP + 0x10, V0);
			V0 = 1;
			WriteLongToBuffer(Buffer, SP + 0x14, V0);

			A2 = T3 + S0;
		}

		S8 = S8 + 0x16;
		//800847B8
		Function800861D0(ROM, romSize, Buffer, A0, A1, A2, A3, SP);

		//800847C0
		V0 = S4 + 0x28;
		S4 = V0;

		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x10;

		V0 = (int)V0 < 0xA0;
		//800847D4
	} while (V0 != 0);

	//800847DC
	A0 = 0x80128700;
	A1 = A0 + (signed short)0xFEC0;
	A2 = 0x9A;

	Function80084D60(ROM, romSize, Buffer, pcmSamples, A0, A1, A2);
}

void CKobe2ADPCMDecoder::Function800840A0(unsigned char* ROM, int romSize, unsigned long address, unsigned long length, unsigned char* Buffer, std::vector<unsigned short>& pcmSamples, unsigned long A0Param, unsigned long A1Param, unsigned long A2Param, unsigned long A3Param, unsigned long& V0)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = A2Param;
	unsigned long A3 = A3Param;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = 0x80128298;

	S0 = A0;
	S1 = A1;
	S5 = A2 << 7;
	S4 = A3 << 7;
	S3 = 0x80128474;

	S6 = SP + 0x68;

	//800840E0
	if (S1 <= 0)
	{
		WriteLongToBuffer(Buffer, SP + 90, 0x68);

		// GOTO 800842C4
		V0 = 0;
		return;
	}

	do
	{
		V0 = variable_80128454;
		T3 = 0xA0;

		//80084100
		if (V0 == T3)
		{
			V1 = variable_801283B0_ROM_Location;

			// Check ROM Location
			if (V1 == 0)
			{
				//80084134
				V0 = (signed short)0xFFFF;

				//GOTO label800842C8
				return;
			}

			V0 = variable_801283B4;
			A0 = variable_80128458;

			V0 = V0 << 3;
			V0 = (signed long)A0 < (signed long)V0;

			A0 = A0 << 2;
			//8008412C
			if (V0 == 0)
			{
				V0 = (signed short)0xFFFF;

				//GOTO label800842C8
				return;
			}

			// ROM Location to Grab
			A0 = V1 + A0;
			// Memory Spot to Copy To
			A1 = S6;
			// Number of bytes to grab
			A2 = 0x20;

			// Grab Bytes
			Function80083854(ROM, romSize, Buffer, A0, A1, A2);

			A0 = S6;

			//80084154
			V0 = variable_80128458;

			A1 = 0x801283E0;
			variable_80128454 = 0;

			V0 = V0 + 8;

			variable_80128458 = V0;
			//80084168
			Function80084330(ROM, romSize, Buffer, A0, A1, A2);

			//80084170
			A0 = 0x801283E0;
			A1 = S3;
			A2 = SP + 0x10;
			//8008417C
			// Main Function
			Function80084400(ROM, romSize, Buffer, pcmSamples, A0, A1, A2, SP);

			//80084184
			V0 = CharArrayToLong(&Buffer[0x800DE8C0 & 0xFFFFFF]);

			//8008418C
			A0 = S3;
			if (V0 != 0)
			{
				A1 = SP + 0x10;
				// TODO Giant function of nested calls.......
				//Function80085DB0();
			}
		}

		//800841A0
		V0 = (variable_80128454 & 0xFFFF);

		T3 = 0xA0;
		V0 = T3 - V0;

		//800841B0
		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x10;

		T1 = V0 << 1;
		V0 = V0 << 0x11;

		V0 = (int)V0 >> 0x10;
		V0 = (int)S1 < (int)V0;

		//800841C8
		if (V0 != 0)
		{
			T1 = S1;
		}
		
		//800841D0
		V0 = T1 << 0x10;
		V1 = (int)V0 >> 0x10;

		V0 = V0 >> 0x1F;
		V1 = V1 + V0;
		V1 = (int)V1 >> 1;

		T0 = 0;

		//Reset buffers...somewhere, just put it here
		//8008275C
		for (int x = 0; x < 0x2CC; x++)
		{
			WriteLongToBuffer(Buffer, S0 + (x * 4), 0);
		}

		int value = CharArrayToLong(&Buffer[0x80148490 & 0xFFFFFF]);

		//800841E4
		if (V1 > 0)
		{
			//800841EC
			T2 = V1;

			do
			{
				//800841F0
				A3 = T0 + 1;
				T0 = A3;

				//800841F8
				V1 = variable_80128454;
				A3 = A3 << 0x10;
				V0 = V1 << 1;
				V0 = V0 + S3;

				//80084208
				V0 = (signed short)CharArrayToShort(&Buffer[V0 & 0xFFFFFF]);
				A3 = (int)A3 >> 0x10;

				A0 = V0 * S5;
				A3 = (int)A3 < (int)T2;
				V1 = V1 + 1;

				variable_80128454 = V1;
				V1 = CharArrayToLong(&Buffer[0x800DE8C4 & 0xFFFFFF]);

				//80084228
				A1 = (int)A0 >> 0xE;
				V1 = V1 + A1;

				//80084230
				V1 = V1 << 0xF;
				V1 = (int)V1 >> 0x10;

				T4 = V0 * S4;
				WriteLongToBuffer(Buffer, 0x800DE8C4, A1);
				A1 = A1 << 0x10;
				A1 = (int)A1 >> 0x10;
				A0 = CharArrayToLong(&Buffer[0x800DE8C8 & 0xFFFFFF]);

				//80084250
				A2 = (int)T4 >> 0xE;
				A0 = A0 + A2;
				WriteLongToBuffer(Buffer, 0x800DE8C8, A2);

				V0 = CharArrayToLong(&Buffer[S0 & 0xFFFFFF]);
				A0 = A0 << 0xF;
				V0 = V0 + V1;
				//80084268
				WriteLongToBuffer(Buffer, S0, V0);

				if ((signed long)V0 > 0x7FFF)
					pcmSamples.push_back(0x7FFF);
				else if ((signed long)V0 < (signed short)0x8000)
					pcmSamples.push_back((signed short)0x8000);
				else
					pcmSamples.push_back((signed short)V0);

				S0 = S0 + 4;

				//80084270
				V0 = CharArrayToLong(&Buffer[S0 & 0xFFFFFF]);
				A0 = (int)A0 >> 0x10;
				V0 = V0 + A0;
				//8008427C
				WriteLongToBuffer(Buffer, S0, V0);
				if ((signed long)V0 > 0x7FFF)
					pcmSamples.push_back(0x7FFF);
				else if ((signed long)V0 < (signed short)0x8000)
					pcmSamples.push_back((signed short)0x8000);
				else
					pcmSamples.push_back((signed short)V0);
				S0 = S0 + 4;

				//80084284
				V0 = CharArrayToLong(&Buffer[S0 & 0xFFFFFF]);
				A2 = A2 << 0x10;
				V0 = V0 + A1;
				//80084290
				WriteLongToBuffer(Buffer, S0, V0);
				if ((signed long)V0 > 0x7FFF)
					pcmSamples.push_back(0x7FFF);
				else if ((signed long)V0 < (signed short)0x8000)
					pcmSamples.push_back((signed short)0x8000);
				else
					pcmSamples.push_back((signed short)V0);
				S0 = S0 + 4;

				//80084298
				V0 = CharArrayToLong(&Buffer[S0 & 0xFFFFFF]);
				A2 = (int)A2 >> 0x10;
				V0 = V0 + A2;
				//800842A4
				WriteLongToBuffer(Buffer, S0, V0);
				if ((signed long)V0 > 0x7FFF)
					pcmSamples.push_back(0x7FFF);
				else if ((signed long)V0 < (signed short)0x8000)
					pcmSamples.push_back((signed short)0x8000);
				else
					pcmSamples.push_back((signed short)V0);
				S0 = S0 + 4;

				// Later written 16-bit to 801478A0...then passed to audio reg
			} while (A3 != 0);
		}

		//800842B0
		V0 = T1 << 0x10;
		V0 = (int)V0 >> 0x10;
		S1 = S1 - V0;
	} while (S1 > 0);

	//800842C4
	V0 = 0;
}

void CKobe2ADPCMDecoder::Function80086180(unsigned char* ROM, int romSize, unsigned long address, unsigned long length, unsigned char* Buffer, unsigned long A0Param, unsigned long A1Param, unsigned long SPParam)
{
	unsigned long AT = 0;
	unsigned long A0 = A0Param;
	unsigned long A1 = A1Param;
	unsigned long A2 = 0;
	unsigned long A3 = 0;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = SPParam;	

	A1 = A1 << 0x10;
	A1 = (int)A1 >> 0x10;

	V1 = 0;

	if ((int)A1 <= 0)
	{
		return;
	}

	//80086190
	V0 = V1 << 0x10;

	int V0Check = 0;
	do
	{
		//80086194
		V0 = (int)V0 >> 0xF;

		V0 = V0 + A0;
		WriteShortToBuffer(Buffer, V0, 0);

		V0 = V1 + 1;
		V1 = V0;

		//800861A8
		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x10;

		V0Check  = (int)V0 < (int)A1;
		if (V0Check != 0)
		{
			V0 = V1 << 0x10;
		}
	} while (V0Check != 0);
}

void CKobe2ADPCMDecoder::Function80084820(unsigned char* ROM, int romSize, unsigned long address, unsigned long length, unsigned char* Buffer, unsigned long SPParam)
{
	unsigned long AT = 0;
	unsigned long A0 = 0;
	unsigned long A1 = 0;
	unsigned long A2 = 0;
	unsigned long A3 = 0;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = SPParam;	

	//80084820
	SP = SP + (signed short)0xFFE8;
	V0 = 0x801286F4;
	A0 = V0 + (signed short)0xFECC;
	A1 = 0x9A;

	WriteLongToBuffer(Buffer, 0x80128834, V0);

	//8008483C
	Function80086180(ROM, romSize, address, length, Buffer, A0, A1, SP);

	//80084844
	A0 = 0x80128860;
	A1 = 0xA;

	//8008484C
	Function80086180(ROM, romSize, address, length, Buffer, A0, A1, SP);

	//80084854
	V0 = 0x7530;
	V1 = 0x80128840;
	WriteShortToBuffer(Buffer, V1, V0);

	//80084868
	V0 = 0x6590;
	WriteShortToBuffer(Buffer, V1 + 2, V0);
	
	V0 = 0x5208;
	WriteShortToBuffer(Buffer, V1 + 4, V0);

	V0 = 0x3A98;
	WriteShortToBuffer(Buffer, V1 + 6, V0);

	V0 = 0x1F40;
	WriteShortToBuffer(Buffer, V1 + 8, V0);

	V0 = 0xE0C0;
	WriteShortToBuffer(Buffer, V1 + 0xC, V0);

	V0 = 0xC568;
	WriteShortToBuffer(Buffer, V1 + 0xE, V0);

	V0 = 0xADF8;
	WriteShortToBuffer(Buffer, V1 + 0x10, V0);

	WriteShortToBuffer(Buffer, V1 + 0xA, 0);

	V0 = 0x9A70;
	WriteShortToBuffer(Buffer, V1 + 0x12, V0);

	SP = SP + 0x18;
}

void CKobe2ADPCMDecoder::Function80086048(unsigned char* ROM, int romSize, unsigned long address, unsigned long length, unsigned char* Buffer, unsigned long SPParam)
{
	unsigned long AT = 0;
	unsigned long A0 = 0;
	unsigned long A1 = 0;
	unsigned long A2 = 0;
	unsigned long A3 = 0;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = SPParam;	

	SP = SP + (signed short)0xFFE8;
	A0 = 0x80128930;
	// RA to SP
	A1 = 0xA;

	//80086058
	Function80086180(ROM, romSize, address, length, Buffer, A0, A1, SP);

	//80086060
	A0 = 0x801288E0;
	A1 = 0x28;
	Function80086180(ROM, romSize, address, length, Buffer, A0, A1, SP);

	SP = SP + 0x18;
}

void CKobe2ADPCMDecoder::Function80085250(unsigned char* ROM, int romSize, unsigned long address, unsigned long length, unsigned char* Buffer, unsigned long SPParam)
{
	unsigned long AT = 0;
	unsigned long A0 = 0;
	unsigned long A1 = 0;
	unsigned long A2 = 0;
	unsigned long A3 = 0;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = SPParam;	

	A0 = 0;
	V1 = 0x80128460;

	//80085264
	V0 = A0 << 0x10;

	int V0Check = 0;
	do
	{
		//80085268
		V0 = (int)V0 >> 0xF;
		V0 = V0 + 1;
		WriteShortToBuffer(Buffer, V0 & 0xFFFFFF, 0);

		V0 = A0 + 1;
		A0 = V0;
		
		//8008527C
		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x10;

		V0Check = (int)V0 < 0xA;
		if (V0Check)
		{
			V0 = A0 << 0x10;
		}
	} while (V0Check != 0);

	//80085290
	Function80084820(ROM, romSize, address, length, Buffer, SP);

	//80085298
	V1 = 0x1000;
	WriteShortToBuffer(Buffer, 0x80128880, V1);

	A0 = 0;
	A1 = 0x801288A0;

	V1 = (signed short)0xF6B3;

	//800852B4
	V0 = A0 << 0x10;

	do
	{
		//V0Check
		V0 = (int)V0 >> 0xF;

		V0 = V0 + A1;
		WriteShortToBuffer(Buffer, V0, V1);

		V0 = A0 + 1;
		A0 = V0;

		//800852CC
		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x10;

		V0Check = (int)V0 < 0x4;
		if (V0Check != 0)
		{
			V0 = A0 << 0x10;
		}
	} while (V0Check != 0);

	//800852E0
	A0 = 0;
	A1 = 0x801288B0;

	V1 = 0x801288A8;

	V0 = 0x2C;
	WriteShortToBuffer(Buffer, V1, V0);

	V0 = 0x25;
	WriteShortToBuffer(Buffer, V1 + 2, V0);

	V0 = 0x16;
	WriteShortToBuffer(Buffer, V1 + 4, V0);

	V0 = 0xC;
	WriteShortToBuffer(Buffer, V1 + 6, V0);

	//80085314
	V0 = A0 << 0x10;

	V0Check = 0;
	do
	{
		//80085318
		V0 = (int)V0 >> 0xF;
		V0 = V0 + A1;
		WriteShortToBuffer(Buffer, V0, 0);

		//80085324
		V0 = A0 + 1;
		A0 = V0;

		//8008532C
		V0 = V0 << 0x10;
		V0 = (int)V0 >> 0x10;

		V0Check = (int)V0 < 0xA;
		if (V0Check != 0)
		{
			V0 = A0 << 0x10;
		}
	} while (V0Check != 0);

	//80085340
	V0 = 0x80128894;
	V1 = 0x28;
	WriteShortToBuffer(Buffer, V0, V1);

	WriteShortToBuffer(Buffer, 0x801288D0, 0);

	Function80086048(ROM, romSize, address, length, Buffer, SP);

	SP = SP + 0x18;
}

void CKobe2ADPCMDecoder::Function800842F8(unsigned char* ROM, int romSize, unsigned long address, unsigned long length, unsigned char* Buffer)
{
	unsigned long AT = 0;
	unsigned long A0 = 0;
	unsigned long A1 = 0;
	unsigned long A2 = 0;
	unsigned long A3 = 0;
	unsigned long V0 = 0;
	unsigned long V1 = 0;
	unsigned long S0 = 0;
	unsigned long S1 = 0;
	unsigned long S2 = 0;
	unsigned long S3 = 0;
	unsigned long S4 = 0;
	unsigned long S5 = 0;
	unsigned long S6 = 0;
	unsigned long S7 = 0;
	unsigned long S8 = 0;
	unsigned long T0 = 0;
	unsigned long T1 = 0;
	unsigned long T2 = 0;
	unsigned long T3 = 0;
	unsigned long T4 = 0;
	unsigned long T5 = 0;
	unsigned long T6 = 0;
	unsigned long T7 = 0;
	unsigned long T8 = 0;
	unsigned long T9 = 0;
	unsigned long SP = 0x80128298;

	SP = SP + (signed short)0xFFE8;
	// RA to SP

	Function80085250(ROM, romSize, address, length, Buffer, SP);

	V1 = 0xA0;
	variable_80128454 = V1;
	variable_80128458 = 0;

	SP = SP + 0x18;
}

bool CKobe2ADPCMDecoder::Decode(unsigned char* ROM, int romSize, unsigned long address, unsigned long length, std::vector<unsigned short>& pcmSamples, int numChunks, int soundType)
{
	variable801242EC_C_S2 = 0;
	variable801242F0_10_S2_CompressedDataSpot = 0;
	variable801242F8_18_S2 = 0;
	variable80124300_20_S2 = 0;
	variable8012430C_2C_S2 = 0;
	variable80124320_40_S2 = 0;

	variable_801283B4 = 0x105;
	variable_80128454 = 0xA0;
	variable_80128458 = 0x00000000;
	variable_801283B0_ROM_Location = 0xD26048;
	variable_80124338 = 0x5F;
	variable_8012433C = 0x2F;

	unsigned char* Buffer = new unsigned char[0x400000];
	for (int x = 0; x < 0x400000; x++)
	{
		Buffer[x] = 0x00;
	}


	// Copy Predictors Type 2
	// 0xDF2A0 ROM

	static unsigned char ROMDF2A0[0x210] =
	{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x01, 0x80, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 
		0x00, 0x00, 0x00, 0xE6, 0x00, 0x00, 0x00, 0xE6, 0x00, 0x00, 0x00, 0xE6, 0x00, 0x00, 0x00, 0xE6, 
		0x00, 0x00, 0x01, 0x33, 0x00, 0x00, 0x01, 0x99, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x66, 
		0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x66, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x99, 
		0x00, 0x00, 0x01, 0x33, 0x00, 0x00, 0x00, 0xE6, 0x00, 0x00, 0x00, 0xE6, 0x00, 0x00, 0x00, 0xE6, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x08, 
		0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 
		0x00, 0x00, 0x00, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0A, 
		0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0E, 
		0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x15, 
		0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x1F, 
		0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x2D, 
		0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x42, 
		0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x61, 
		0x00, 0x00, 0x00, 0x6B, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x8F, 
		0x00, 0x00, 0x00, 0x9D, 0x00, 0x00, 0x00, 0xAD, 0x00, 0x00, 0x00, 0xBE, 0x00, 0x00, 0x00, 0xD1, 
		0x00, 0x00, 0x00, 0xE6, 0x00, 0x00, 0x00, 0xFD, 0x00, 0x00, 0x01, 0x17, 0x00, 0x00, 0x01, 0x33, 
		0x00, 0x00, 0x01, 0x51, 0x00, 0x00, 0x01, 0x73, 0x00, 0x00, 0x01, 0x98, 0x00, 0x00, 0x01, 0xC1, 
		0x00, 0x00, 0x01, 0xEE, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x02, 0x56, 0x00, 0x00, 0x02, 0x92, 
		0x00, 0x00, 0x02, 0xD4, 0x00, 0x00, 0x03, 0x1C, 0x00, 0x00, 0x03, 0x6C, 0x00, 0x00, 0x03, 0xC3, 
		0x00, 0x00, 0x04, 0x24, 0x00, 0x00, 0x04, 0x8E, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x05, 0x83, 
		0x00, 0x00, 0x06, 0x10, 0x00, 0x00, 0x06, 0xAB, 0x00, 0x00, 0x07, 0x56, 0x00, 0x00, 0x08, 0x12, 
		0x00, 0x00, 0x08, 0xE0, 0x00, 0x00, 0x09, 0xC3, 0x00, 0x00, 0x0A, 0xBD, 0x00, 0x00, 0x0B, 0xD0, 
		0x00, 0x00, 0x0C, 0xFF, 0x00, 0x00, 0x0E, 0x4C, 0x00, 0x00, 0x0F, 0xBA, 0x00, 0x00, 0x11, 0x4C, 
		0x00, 0x00, 0x13, 0x07, 0x00, 0x00, 0x14, 0xEE, 0x00, 0x00, 0x17, 0x06, 0x00, 0x00, 0x19, 0x54, 
		0x00, 0x00, 0x1B, 0xDC, 0x00, 0x00, 0x1E, 0xA5, 0x00, 0x00, 0x21, 0xB6, 0x00, 0x00, 0x25, 0x15, 
		0x00, 0x00, 0x28, 0xCA, 0x00, 0x00, 0x2C, 0xDF, 0x00, 0x00, 0x31, 0x5B, 0x00, 0x00, 0x36, 0x4B, 
		0x00, 0x00, 0x3B, 0xB9, 0x00, 0x00, 0x41, 0xB2, 0x00, 0x00, 0x48, 0x44, 0x00, 0x00, 0x4F, 0x7E, 
		0x00, 0x00, 0x57, 0x71, 0x00, 0x00, 0x60, 0x2F, 0x00, 0x00, 0x69, 0xCE, 0x00, 0x00, 0x74, 0x62, 
		0x00, 0x00, 0x7F, 0xFF, 0x00, 0x00, 0x7F, 0xFF, 0x00, 0x00, 0x7F, 0xFF, 0x00, 0x00, 0x7F, 0xFF, 
	} ;

	for (int x = 0; x < 0x210; x++)
	{
		Buffer[(0x800DE6A0 & 0xFFFFFF) + x] = ROMDF2A0[x]; //ROM[0xDF2A0 + x];
	}

	static unsigned char ROMF1180[0x2240] =
	{
		0x07, 0x08, 0x09, 0x08, 0x06, 0x09, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x03, 0x03, 0x03, 0x03, 
		0x03, 0x05, 0x06, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x03, 0x03, 0x03, 0x03, 0x03, 0x05, 0x09, 
		0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x03, 0x03, 0x03, 0x03, 0x03, 0x05, 0x06, 0x04, 0x04, 0x04, 
		0x04, 0x04, 0x04, 0x03, 0x03, 0x03, 0x03, 0x03, 0x05, 0x0D, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x02, 0x00, 0x05, 0x00, 0x06, 0x00, 0x04, 0x00, 0x07, 
		0x00, 0x00, 0x0C, 0xCD, 0x19, 0x9C, 0x20, 0x00, 0x26, 0x66, 0x2C, 0xCD, 0x30, 0x00, 0x33, 0x33, 
		0x36, 0x66, 0x39, 0x9A, 0x3C, 0xCD, 0x40, 0x00, 0x43, 0x33, 0x46, 0x66, 0x49, 0x9A, 0x4C, 0xCD, 
		0x00, 0x9F, 0x00, 0xCE, 0x01, 0x0C, 0x01, 0x5D, 0x01, 0xA3, 0x01, 0xE2, 0x02, 0x2A, 0x02, 0x7D, 
		0x02, 0xDD, 0x03, 0x4A, 0x03, 0xC9, 0x04, 0x5A, 0x05, 0x01, 0x05, 0xC1, 0x06, 0x9E, 0x07, 0x9C, 
		0x08, 0xC1, 0x0A, 0x11, 0x0B, 0x93, 0x0D, 0x50, 0x0F, 0x4F, 0x11, 0x9B, 0x14, 0x3F, 0x17, 0x48, 
		0x1A, 0xC7, 0x1E, 0xCB, 0x23, 0x69, 0x28, 0xB9, 0x30, 0xDE, 0x3F, 0x87, 0x52, 0x96, 0x6B, 0x5D, 
		0x05, 0x68, 0x08, 0x1D, 0x0D, 0x5C, 0x13, 0xF4, 0x1A, 0x56, 0x1F, 0xBA, 0x26, 0x87, 0x2B, 0x54, 
		0x31, 0xAA, 0x35, 0x85, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x4F, 0x53, 0x49, 0x64, 
		0x05, 0x68, 0x08, 0x1D, 0x0D, 0x5C, 0x13, 0xF4, 0x1A, 0x56, 0x1F, 0xBA, 0x26, 0x87, 0x2B, 0x54, 
		0x31, 0xAA, 0x35, 0x85, 0xFE, 0x3D, 0xFB, 0xD7, 0xFD, 0xEF, 0xFA, 0xE7, 0xFE, 0x3E, 0xFD, 0x0C, 
		0xFE, 0x0F, 0xFC, 0xA1, 0xFE, 0x80, 0xFD, 0x95, 0xFE, 0x63, 0xFD, 0x63, 0xFE, 0xC3, 0xFD, 0xE6, 
		0xFE, 0xB5, 0xFD, 0xD4, 0xFE, 0x62, 0xFE, 0x04, 0xFE, 0x58, 0xFE, 0x86, 0xFE, 0xEE, 0xFE, 0xBC, 
		0xFE, 0x4E, 0xFD, 0x9A, 0xFF, 0x1E, 0xFE, 0x0C, 0xFF, 0x18, 0xFD, 0xFE, 0xFE, 0xF9, 0xFE, 0x87, 
		0xFE, 0xD6, 0xFE, 0x66, 0xFF, 0x69, 0xFD, 0x3A, 0xFF, 0x52, 0xFC, 0xCE, 0xFF, 0x6B, 0xFE, 0x64, 
		0xFF, 0x64, 0xFE, 0x53, 0xFE, 0xE0, 0xFE, 0x32, 0xFF, 0x46, 0xFF, 0x35, 0xFF, 0x56, 0xFE, 0xD2, 
		0xFF, 0x41, 0xFE, 0xBF, 0xFF, 0x7D, 0xFF, 0x6D, 0xFE, 0xD7, 0xFE, 0x75, 0xFF, 0x1C, 0xFF, 0x2A, 
		0xFF, 0x0B, 0xFF, 0x40, 0xFF, 0xBD, 0xFE, 0xC4, 0xFF, 0xB9, 0xFE, 0xB9, 0xFF, 0x98, 0xFF, 0x33, 
		0xFF, 0xA2, 0xFF, 0x49, 0xFF, 0x71, 0xFF, 0xDA, 0xFF, 0x3F, 0xFF, 0xA1, 0x00, 0x10, 0xFF, 0xB4, 
		0xFF, 0x84, 0xFF, 0x08, 0x00, 0x17, 0xFF, 0x13, 0x00, 0x18, 0xFF, 0x0C, 0x00, 0x12, 0xFF, 0x78, 
		0x00, 0x2C, 0xFF, 0x91, 0xFF, 0xDF, 0xFF, 0xE8, 0xFF, 0xE7, 0x00, 0x00, 0x00, 0x95, 0x00, 0x13, 
		0x00, 0x17, 0xFF, 0x71, 0x00, 0x9E, 0xFF, 0x57, 0x00, 0xAE, 0xFF, 0x4B, 0x00, 0x85, 0xFF, 0xC9, 
		0x00, 0xA5, 0xFF, 0xE6, 0x00, 0x6F, 0x00, 0x54, 0x00, 0x62, 0x00, 0x4B, 0x00, 0x57, 0x00, 0xB7, 
		0xFF, 0x8D, 0xFF, 0xF5, 0xFF, 0xF8, 0x00, 0x82, 0x00, 0x0B, 0x00, 0xAA, 0x00, 0xFE, 0x00, 0x4D, 
		0x00, 0xCD, 0x00, 0x11, 0x00, 0xB7, 0x00, 0x70, 0x01, 0x06, 0x00, 0xC2, 0x00, 0xCA, 0x01, 0x1F, 
		0x00, 0x5F, 0x00, 0xBD, 0xFF, 0xD6, 0xFF, 0x97, 0x00, 0xEA, 0x00, 0xB3, 0x00, 0x27, 0x00, 0xBA, 
		0x00, 0xA3, 0x01, 0x59, 0x01, 0x4C, 0x00, 0xC7, 0x01, 0x2B, 0x00, 0xA1, 0xFF, 0xCA, 0x01, 0x1D, 
		0xFF, 0xB2, 0x01, 0x19, 0xFF, 0x7B, 0x00, 0x8D, 0xFF, 0x4A, 0x00, 0x6F, 0x00, 0xF9, 0x01, 0x55, 
		0x01, 0x0F, 0x01, 0x6C, 0x00, 0x5D, 0x01, 0x93, 0x00, 0x4B, 0x01, 0x87, 0x00, 0x5C, 0x01, 0xFE, 
		0xFF, 0x76, 0x00, 0xDC, 0xFF, 0x47, 0xFF, 0xE3, 0xFF, 0xDE, 0x01, 0x69, 0xFF, 0x8D, 0x01, 0x40, 
		0x00, 0x03, 0x02, 0x2A, 0x00, 0x63, 0x01, 0x1E, 0x00, 0xDA, 0x02, 0x4F, 0xFF, 0x0B, 0x01, 0x96, 
		0xFE, 0xF4, 0x01, 0xC5, 0x00, 0x00, 0x02, 0x44, 0x00, 0x19, 0x02, 0x5E, 0x01, 0x13, 0x02, 0x14, 
		0x00, 0x94, 0x01, 0xC2, 0xFF, 0xB7, 0x02, 0xE3, 0xFE, 0xE3, 0x02, 0x06, 0xFE, 0xE0, 0x00, 0x5E, 
		0xFF, 0x35, 0x02, 0xA2, 0xFF, 0x74, 0xFF, 0xB6, 0x00, 0xCD, 0x02, 0xCA, 0xFF, 0x8E, 0x01, 0x2B, 
		0x00, 0xB0, 0x03, 0x9B, 0x00, 0xB6, 0x02, 0x2D, 0x00, 0xF0, 0x02, 0xC1, 0xFF, 0xF0, 0x02, 0x01, 
		0x01, 0xE5, 0x02, 0x51, 0x01, 0x25, 0x01, 0x80, 0x01, 0xC3, 0x02, 0x69, 0xFF, 0xDA, 0x00, 0x32, 
		0x02, 0x33, 0x02, 0x11, 0x01, 0x2F, 0x00, 0xD1, 0x01, 0xCB, 0x01, 0x6B, 0x01, 0xB1, 0x01, 0xC4, 
		0x01, 0xC2, 0x01, 0xC6, 0x01, 0x6F, 0x02, 0x5E, 0x01, 0xDD, 0x02, 0xE5, 0x01, 0xB0, 0x01, 0x61, 
		0x01, 0x70, 0x01, 0x0B, 0x01, 0x69, 0x02, 0xCC, 0x01, 0x11, 0x02, 0x47, 0x01, 0xC5, 0x00, 0xA6, 
		0x01, 0xFE, 0x00, 0xAC, 0x00, 0xC9, 0x02, 0x75, 0x01, 0x12, 0x00, 0xBF, 0x02, 0x38, 0x02, 0x7F, 
		0x01, 0x2E, 0x01, 0x2A, 0x02, 0x7A, 0x01, 0x83, 0x02, 0x83, 0x01, 0x5E, 0x02, 0x4B, 0x02, 0x30, 
		0x02, 0x64, 0x02, 0x35, 0x02, 0x58, 0x03, 0x14, 0x01, 0xE7, 0x02, 0xA0, 0x02, 0x00, 0x03, 0xF7, 
		0x01, 0x41, 0x01, 0x4D, 0x01, 0x65, 0x03, 0x56, 0xFF, 0x83, 0x01, 0x9D, 0x01, 0xDA, 0x02, 0xC8, 
		0x00, 0x11, 0xFF, 0x69, 0x02, 0x34, 0x01, 0x1D, 0x01, 0x0E, 0xFF, 0x0F, 0x03, 0xCB, 0x03, 0x79, 
		0x01, 0xE9, 0x00, 0xDC, 0x01, 0xFE, 0x03, 0x80, 0x02, 0x25, 0x03, 0x9C, 0x01, 0x47, 0x03, 0x39, 
		0x01, 0x22, 0x03, 0x8F, 0x02, 0x1C, 0x04, 0x54, 0x00, 0x9E, 0x03, 0x25, 0x00, 0xC7, 0x03, 0xBD, 
		0x01, 0xFF, 0x02, 0xDA, 0x00, 0x64, 0x03, 0x6A, 0x00, 0x0D, 0x03, 0x17, 0x01, 0xB3, 0x02, 0x78, 
		0x02, 0xA4, 0x03, 0xCC, 0x00, 0xF9, 0x03, 0x84, 0x01, 0xD3, 0x04, 0xC2, 0x03, 0x0D, 0x04, 0x32, 
		0x02, 0x49, 0x03, 0x11, 0xFF, 0xE9, 0x02, 0x9D, 0x01, 0x0B, 0x04, 0x13, 0x02, 0x6B, 0x04, 0x3C, 
		0x02, 0x67, 0x04, 0x79, 0x02, 0x6E, 0x03, 0x89, 0x03, 0x94, 0x04, 0x19, 0x00, 0x50, 0x01, 0x4B, 
		0x02, 0x48, 0x04, 0x33, 0x00, 0x59, 0x02, 0x7F, 0x03, 0xDC, 0x03, 0xC1, 0x03, 0x02, 0x02, 0xD0, 
		0x03, 0x1E, 0x02, 0xBB, 0x01, 0xEC, 0x01, 0xBF, 0x03, 0x83, 0x02, 0x73, 0x01, 0x0F, 0x04, 0xA4, 
		0x02, 0xD5, 0x05, 0x35, 0x00, 0x57, 0x02, 0x5B, 0x03, 0x40, 0x06, 0x43, 0x02, 0x68, 0x04, 0x67, 
		0x03, 0x7A, 0x05, 0xE1, 0x03, 0xE8, 0x04, 0x84, 0x03, 0x62, 0x03, 0xF1, 0x03, 0xE3, 0x03, 0x3B, 
		0x04, 0x7D, 0x03, 0x5A, 0x03, 0x31, 0x05, 0xAA, 0x03, 0x05, 0x05, 0x28, 0x01, 0xF4, 0x05, 0x6D, 
		0x01, 0x38, 0x04, 0x81, 0xFF, 0xEC, 0x04, 0x3C, 0x00, 0x40, 0x05, 0x03, 0x00, 0x02, 0x04, 0x94, 
		0x01, 0x8F, 0x07, 0x4D, 0x02, 0x02, 0x06, 0xAA, 0x01, 0xF6, 0x06, 0x64, 0x03, 0x76, 0x05, 0xF2, 
		0x01, 0xA0, 0x02, 0x58, 0x04, 0x6B, 0x05, 0x46, 0x04, 0xFB, 0x05, 0x6E, 0x03, 0x79, 0x07, 0x03, 
		0x03, 0x92, 0x06, 0xE6, 0x00, 0xE3, 0x04, 0x9F, 0x04, 0xE2, 0x07, 0x22, 0x01, 0xF9, 0x07, 0x3E, 
		0x03, 0x97, 0x09, 0x31, 0xFF, 0x39, 0x01, 0xAF, 0x00, 0x98, 0x06, 0xC7, 0xFF, 0x2B, 0xFF, 0xE4, 
		0x01, 0x88, 0x05, 0x36, 0xFF, 0x67, 0xFF, 0xCC, 0x03, 0xD2, 0x04, 0x7F, 0xFE, 0xBD, 0xFE, 0x70, 
		0x03, 0x2D, 0x06, 0xA7, 0xFF, 0x78, 0x00, 0x54, 0x05, 0xA9, 0x07, 0xDF, 0xFE, 0xB5, 0xFF, 0x71, 
		0xFF, 0x77, 0x04, 0xA8, 0xFF, 0x00, 0x02, 0x16, 0xFF, 0x63, 0x04, 0x07, 0xFE, 0xCD, 0xFE, 0x49, 
		0x02, 0x1E, 0x02, 0xDB, 0xFE, 0xB7, 0xFE, 0x5C, 0xFF, 0x9F, 0x02, 0x68, 0xFE, 0x96, 0xFF, 0x58, 
		0xFE, 0xBE, 0x01, 0x6E, 0xFF, 0x09, 0xFF, 0x92, 0xFF, 0x2D, 0x00, 0x59, 0xFF, 0x3C, 0xFE, 0xCB, 
		0x00, 0x14, 0x00, 0x3B, 0xFE, 0x94, 0xFE, 0x31, 0xFE, 0xE2, 0x00, 0x59, 0xFE, 0xB0, 0x00, 0xAF, 
		0xFE, 0x50, 0x00, 0x8D, 0xFE, 0x85, 0xFF, 0x42, 0xFE, 0x4E, 0xFF, 0x3C, 0xFF, 0xB1, 0x00, 0x96, 
		0xFE, 0xEA, 0xFF, 0x1D, 0xFE, 0xE8, 0x00, 0xA6, 0xFD, 0xD5, 0xFE, 0x5A, 0xFF, 0x65, 0x02, 0x1D, 
		0xFE, 0x92, 0x00, 0x36, 0xFF, 0xE3, 0xFF, 0xAD, 0xFE, 0xD3, 0xFC, 0xFA, 0x00, 0xBA, 0x02, 0x74, 
		0xFE, 0x73, 0xFE, 0xF8, 0x00, 0xF2, 0x01, 0x25, 0xFF, 0x3B, 0xFD, 0xB7, 0x00, 0x7C, 0x01, 0x9A, 
		0x00, 0x35, 0xFF, 0x7B, 0x00, 0x0A, 0x01, 0x54, 0xFD, 0xC6, 0xFB, 0xD7, 0x00, 0x41, 0xFE, 0x42, 
		0x00, 0x44, 0xFE, 0x13, 0x01, 0x7F, 0x03, 0xA9, 0xFE, 0x9B, 0xFD, 0x39, 0xFE, 0x99, 0xFF, 0x06, 
		0xFD, 0x5B, 0xFB, 0xD4, 0x01, 0x24, 0xFF, 0xE6, 0x01, 0x6B, 0x00, 0x06, 0x02, 0x5F, 0x05, 0x21, 
		0xFF, 0x81, 0xFF, 0xF6, 0x05, 0xE9, 0x07, 0x5E, 0x02, 0xC9, 0x03, 0xCC, 0x05, 0xBD, 0x08, 0x85, 
		0x05, 0xA3, 0x07, 0xE0, 0xF9, 0xA1, 0xF9, 0xC0, 0xF8, 0xFC, 0xF7, 0x0E, 0xFB, 0xFD, 0xF9, 0x16, 
		0xFB, 0xB4, 0xF8, 0x17, 0xFB, 0x03, 0xFA, 0x94, 0xFA, 0xA9, 0xFA, 0x02, 0xFC, 0x4D, 0xFA, 0x4B, 
		0xFC, 0x34, 0xFA, 0x0C, 0xFC, 0x19, 0xFB, 0x3A, 0xFC, 0x04, 0xFB, 0x6C, 0xFC, 0xD1, 0xFC, 0x25, 
		0xFC, 0x20, 0xFA, 0xA5, 0xFB, 0x40, 0xFC, 0x12, 0xFA, 0xF7, 0xFB, 0xBA, 0xFD, 0x18, 0xFB, 0x0C, 
		0xFD, 0x0D, 0xFA, 0xF3, 0xFC, 0xA2, 0xFC, 0x65, 0xFC, 0x77, 0xFC, 0x28, 0xFD, 0x5A, 0xFB, 0xE5, 
		0xFD, 0x53, 0xFB, 0xE6, 0xFB, 0xC1, 0xFC, 0x27, 0xFB, 0xDA, 0xFD, 0x59, 0xFC, 0x23, 0xFD, 0x7F, 
		0xFB, 0x99, 0xFC, 0x30, 0xFD, 0x06, 0xFD, 0x72, 0xFC, 0x86, 0xFC, 0xDA, 0xFC, 0xBF, 0xFB, 0xBD, 
		0xFD, 0x3E, 0xFD, 0x8B, 0xFD, 0x93, 0xFC, 0xDA, 0xFD, 0x80, 0xFC, 0xD4, 0xFC, 0xF9, 0xFD, 0x86, 
		0xFC, 0xF5, 0xFD, 0xE1, 0xFC, 0x1C, 0xFD, 0xCB, 0xFB, 0xCD, 0xFD, 0xBC, 0xFD, 0xDE, 0xFD, 0x9D, 
		0xFD, 0xC4, 0xFD, 0x95, 0xFD, 0x08, 0xFE, 0xDE, 0xFC, 0x91, 0xFD, 0xF2, 0xFC, 0xC9, 0xFE, 0x32, 
		0xFC, 0xE5, 0xFF, 0x03, 0xFD, 0xD7, 0xFE, 0x61, 0xFD, 0xB3, 0xFE, 0x49, 0xFD, 0xEB, 0xFE, 0xAC, 
		0xFD, 0x4C, 0xFC, 0x59, 0xFE, 0x07, 0xFC, 0xFC, 0xFD, 0x42, 0xFB, 0x95, 0xFE, 0xF9, 0xFE, 0xCE, 
		0xFC, 0x35, 0xFE, 0x1D, 0xFE, 0x43, 0xFF, 0xB6, 0xFD, 0xD5, 0xFD, 0xDC, 0xFD, 0x9A, 0xFF, 0x7F, 
		0xFD, 0x4B, 0xFF, 0x16, 0xFE, 0x74, 0xFF, 0x0A, 0xFE, 0x25, 0xFF, 0x06, 0xFE, 0xF7, 0xFE, 0x6C, 
		0xFE, 0x88, 0xFD, 0xFE, 0xFE, 0x5F, 0xFE, 0x02, 0xFE, 0xD4, 0xFE, 0xC7, 0xFE, 0xB2, 0xFD, 0x68, 
		0xFE, 0x31, 0xFC, 0xD2, 0xFE, 0x7E, 0xFD, 0x40, 0xFE, 0xAF, 0xFD, 0x99, 0xFF, 0x16, 0xFF, 0x37, 
		0xFF, 0x17, 0xFF, 0x11, 0xFF, 0x59, 0xFD, 0xC9, 0xFF, 0x35, 0xFD, 0x95, 0xFF, 0x6D, 0xFE, 0x61, 
		0xFF, 0x8D, 0xFE, 0xA0, 0xFF, 0x5A, 0xFD, 0x12, 0xFF, 0x55, 0xFD, 0x07, 0xFE, 0xF2, 0xFC, 0x91, 
		0xFE, 0xF8, 0xFC, 0x79, 0xFE, 0x91, 0xFD, 0x18, 0x00, 0x2B, 0xFE, 0x25, 0x00, 0x0E, 0xFD, 0x73, 
		0x00, 0x2B, 0xFD, 0x62, 0x00, 0x0B, 0xFE, 0x40, 0xFF, 0xC5, 0xFD, 0xF7, 0xFF, 0x82, 0xFF, 0x89, 
		0xFF, 0x65, 0xFD, 0x9B, 0xFF, 0xD6, 0xFC, 0xA1, 0xFF, 0xE5, 0xFC, 0x5D, 0x00, 0x88, 0xFE, 0x1D, 
		0x00, 0xB7, 0xFE, 0x2C, 0x00, 0x37, 0xFE, 0xD6, 0x00, 0x37, 0xFE, 0xD0, 0x01, 0x39, 0xFD, 0x9F, 
		0x01, 0x39, 0xFD, 0x30, 0x01, 0x42, 0xFF, 0x59, 0x00, 0x64, 0xFD, 0xE3, 0xFF, 0xFD, 0xFF, 0x89, 
		0xFF, 0x91, 0xFF, 0x45, 0x00, 0xE9, 0xFF, 0x14, 0x01, 0x04, 0xFF, 0x16, 0x00, 0x1A, 0xFF, 0x5B, 
		0x00, 0x86, 0xFF, 0xD3, 0xFF, 0xD8, 0xFD, 0xDB, 0x01, 0x68, 0xFF, 0x35, 0x01, 0x7A, 0xFE, 0x7C, 
		0x01, 0xC2, 0xFE, 0x81, 0x01, 0x13, 0x00, 0x14, 0x00, 0xB6, 0xFF, 0x99, 0x00, 0xF6, 0xFF, 0x91, 
		0x01, 0xAF, 0x00, 0x25, 0x01, 0xCE, 0xFF, 0x6E, 0x01, 0xE7, 0xFF, 0x63, 0xFE, 0xE4, 0xFF, 0xC5, 
		0x01, 0xF7, 0xFF, 0x48, 0x00, 0x18, 0x00, 0x35, 0xFF, 0xFD, 0x00, 0x36, 0x00, 0x7A, 0x01, 0x03, 
		0x01, 0x4D, 0x00, 0x42, 0x01, 0xE4, 0x00, 0x68, 0x01, 0xB4, 0x00, 0x44, 0x00, 0xC3, 0x00, 0x74, 
		0x00, 0xBE, 0x00, 0xCE, 0x01, 0x0D, 0xFF, 0xF7, 0x01, 0xE2, 0x01, 0x60, 0x01, 0x7E, 0x01, 0x1D, 
		0x01, 0x8F, 0x01, 0x15, 0x01, 0xC4, 0x01, 0x00, 0x00, 0x45, 0x00, 0xBA, 0x00, 0x0D, 0x01, 0x29, 
		0xFF, 0xF3, 0x01, 0x03, 0xFF, 0xA1, 0x00, 0x1E, 0x00, 0x38, 0x01, 0x8A, 0x00, 0xC4, 0x01, 0xA9, 
		0x00, 0xCD, 0x01, 0xC8, 0x01, 0x19, 0x02, 0x41, 0x00, 0x0F, 0x00, 0xBF, 0x01, 0x77, 0x01, 0x22, 
		0x01, 0x97, 0x02, 0x40, 0xFF, 0xC8, 0x00, 0xE3, 0x02, 0x20, 0x01, 0x95, 0x00, 0x00, 0x02, 0x25, 
		0xFF, 0xA4, 0x02, 0x10, 0xFF, 0x1B, 0x01, 0x5F, 0xFF, 0x0B, 0x01, 0x52, 0xFE, 0x96, 0x01, 0xB3, 
		0x00, 0xA7, 0x02, 0x0F, 0xFF, 0xB5, 0x01, 0x2E, 0x00, 0x5B, 0x03, 0x38, 0x00, 0x81, 0x02, 0x57, 
		0x01, 0xF0, 0x02, 0xA7, 0x00, 0xBA, 0x02, 0xED, 0x00, 0x99, 0x02, 0xE1, 0xFE, 0xE7, 0x02, 0x58, 
		0xFE, 0xA4, 0x02, 0x67, 0xFF, 0x14, 0x03, 0x01, 0x00, 0x29, 0x03, 0x71, 0x00, 0x26, 0x03, 0x7A, 
		0xFF, 0x24, 0x03, 0x49, 0xFE, 0x9B, 0x03, 0x73, 0xFE, 0x77, 0x03, 0x87, 0xFD, 0x86, 0x01, 0xDA, 
		0xFE, 0x44, 0x03, 0x52, 0xFF, 0x51, 0x02, 0xA6, 0xFE, 0x13, 0x00, 0xF2, 0xFD, 0xF9, 0x03, 0x11, 
		0xFD, 0x36, 0x02, 0x46, 0xFD, 0xE3, 0x01, 0x6E, 0xFD, 0xE1, 0x01, 0xB2, 0xFD, 0xAB, 0x01, 0xF4, 
		0xFD, 0x03, 0x00, 0xDE, 0xFD, 0x42, 0x03, 0x95, 0xFD, 0x19, 0x03, 0xC2, 0xFC, 0x9B, 0x01, 0xF5, 
		0xFC, 0x7D, 0x02, 0x24, 0xFE, 0x85, 0x00, 0xC8, 0xFE, 0x4D, 0x00, 0x9D, 0xFC, 0xCD, 0x00, 0xD6, 
		0xFC, 0xA3, 0x00, 0x9D, 0xFD, 0x9A, 0x00, 0x28, 0xFD, 0x88, 0x00, 0x5E, 0xFC, 0x8D, 0xFF, 0xCA, 
		0xFD, 0x1B, 0x02, 0x04, 0xFE, 0x0B, 0x01, 0x2A, 0xFD, 0x9A, 0xFF, 0x55, 0xFC, 0x9A, 0xFF, 0x5F, 
		0xFC, 0x9F, 0xFF, 0xE9, 0xFC, 0xCE, 0x00, 0x5D, 0xFC, 0x09, 0xFE, 0xF5, 0xFD, 0x6A, 0xFE, 0x99, 
		0xFD, 0xDB, 0x00, 0x02, 0xFE, 0x46, 0xFF, 0x87, 0xFE, 0x87, 0x00, 0x00, 0xFF, 0x1D, 0x00, 0x21, 
		0xFE, 0x62, 0xFF, 0x82, 0xFF, 0x7F, 0x00, 0xD4, 0xFC, 0x5A, 0x00, 0x22, 0xFB, 0xC6, 0xFE, 0xE6, 
		0xFB, 0xA1, 0xFE, 0xF4, 0xFD, 0x3A, 0xFC, 0xC7, 0xFE, 0x5C, 0xFF, 0x41, 0xFB, 0xCC, 0xFC, 0x60, 
		0xFC, 0x6B, 0xFF, 0xA3, 0xFD, 0x8C, 0xFE, 0x9A, 0x00, 0x61, 0x00, 0x07, 0xFF, 0x32, 0xFE, 0x77, 
		0xFF, 0x9B, 0x00, 0x18, 0xFF, 0x35, 0x00, 0x26, 0xFF, 0x58, 0x00, 0x53, 0xFD, 0xA9, 0xFE, 0x59, 
		0xFE, 0xE9, 0x01, 0xAA, 0xFD, 0x44, 0x00, 0x76, 0xFF, 0xB5, 0x00, 0xCE, 0xFC, 0x2B, 0xFD, 0x5F, 
		0xFD, 0x58, 0x01, 0xA1, 0xFE, 0x91, 0x00, 0x25, 0xFE, 0xE9, 0x01, 0xDA, 0xFF, 0x7F, 0xFE, 0xC2, 
		0x01, 0x3F, 0x01, 0x28, 0xFD, 0x8E, 0xFF, 0xD9, 0x01, 0x57, 0x02, 0x5A, 0xFD, 0x48, 0xFF, 0xD9, 
		0xFE, 0xD1, 0x03, 0xAC, 0x00, 0x68, 0x00, 0xE9, 0xFE, 0x84, 0x00, 0x89, 0xFF, 0xDC, 0x01, 0x0D, 
		0xFF, 0xB5, 0xFF, 0x2A, 0x00, 0x78, 0x00, 0x2B, 0xFD, 0xEF, 0xFE, 0x23, 0x01, 0xCB, 0x00, 0xA4, 
		0xFF, 0x36, 0xFF, 0x1B, 0xFF, 0xCF, 0xFF, 0x59, 0x02, 0x61, 0x03, 0x18, 0x00, 0x62, 0xFF, 0x24, 
		0x03, 0x93, 0x00, 0x94, 0x01, 0x25, 0x01, 0x1B, 0x03, 0x65, 0x00, 0x5B, 0x02, 0x3F, 0x01, 0x8A, 
		0x01, 0x46, 0xFF, 0xB2, 0x02, 0xCD, 0x00, 0x43, 0x01, 0x6D, 0xFE, 0xBD, 0x02, 0x68, 0xFF, 0xDC, 
		0x02, 0xDB, 0x00, 0x1B, 0x02, 0x6B, 0x00, 0xEE, 0x02, 0x78, 0x01, 0x11, 0x01, 0xC0, 0x00, 0x63, 
		0x03, 0x21, 0x01, 0xDC, 0x03, 0x65, 0x01, 0x11, 0x02, 0xAD, 0x00, 0x40, 0x03, 0x15, 0x00, 0x48, 
		0x03, 0xFD, 0x00, 0xD9, 0x03, 0x19, 0x01, 0xCB, 0x02, 0xDE, 0x01, 0x68, 0x02, 0x86, 0x01, 0xE0, 
		0x01, 0x68, 0x01, 0x42, 0x01, 0xAD, 0x01, 0xD0, 0x02, 0x7E, 0x01, 0xAE, 0x02, 0xF4, 0x01, 0x6B, 
		0x03, 0xE8, 0x01, 0x94, 0x02, 0xAB, 0x02, 0x10, 0x02, 0x5A, 0x02, 0x67, 0x02, 0x8F, 0x01, 0x9D, 
		0x03, 0xB2, 0x02, 0xAF, 0x03, 0xA9, 0x02, 0x5A, 0x03, 0x88, 0x02, 0x5C, 0x02, 0x2B, 0x02, 0xE1, 
		0x03, 0x12, 0x02, 0x96, 0x01, 0xD3, 0x02, 0x8E, 0x01, 0x6A, 0x02, 0x4D, 0x03, 0xA1, 0x02, 0xC6, 
		0x01, 0xF2, 0x01, 0xDE, 0x01, 0x9F, 0x01, 0xA4, 0x02, 0xB5, 0x03, 0x73, 0x03, 0x2D, 0x02, 0xAB, 
		0x03, 0x0D, 0x03, 0x9D, 0x03, 0x91, 0x03, 0xAB, 0x02, 0xD6, 0x02, 0xDC, 0x01, 0xEB, 0x03, 0x55, 
		0x02, 0x13, 0x03, 0xB4, 0x02, 0xDE, 0x03, 0xC3, 0x01, 0x3B, 0x03, 0x28, 0x02, 0xF9, 0x02, 0xF3, 
		0x04, 0x78, 0x02, 0xF8, 0x02, 0x8F, 0x04, 0x34, 0x03, 0x3A, 0x04, 0x21, 0x04, 0x43, 0x03, 0x46, 
		0x03, 0xEB, 0x03, 0x28, 0x04, 0x17, 0x04, 0x6D, 0x02, 0x93, 0x04, 0x4D, 0x03, 0xE0, 0x04, 0x1A, 
		0x04, 0x32, 0x04, 0x33, 0x03, 0xCB, 0x02, 0xB6, 0x04, 0xCA, 0x04, 0x1E, 0x02, 0x3B, 0x03, 0x49, 
		0x03, 0x74, 0x05, 0x7C, 0x05, 0x63, 0x04, 0x48, 0x04, 0x38, 0x03, 0x5D, 0x04, 0xCF, 0x02, 0xDF, 
		0x05, 0x04, 0x02, 0xF8, 0x04, 0xF8, 0x03, 0xDF, 0x05, 0x57, 0x04, 0x1D, 0x04, 0xE9, 0x02, 0xBC, 
		0x04, 0x1A, 0x02, 0x16, 0x03, 0xDC, 0x01, 0xC5, 0x04, 0xF0, 0x02, 0x57, 0x04, 0x74, 0x02, 0xA7, 
		0x06, 0x55, 0x03, 0x2F, 0x05, 0x68, 0x02, 0x09, 0x05, 0x25, 0x01, 0x89, 0x06, 0x1C, 0x03, 0x25, 
		0x05, 0xA8, 0x02, 0xAE, 0x04, 0x2C, 0x02, 0x88, 0x03, 0x6B, 0x01, 0x33, 0x04, 0x3B, 0x01, 0x69, 
		0x04, 0x17, 0x01, 0x3D, 0x05, 0x89, 0x03, 0xC4, 0x02, 0xA3, 0x02, 0x3B, 0x04, 0x80, 0x00, 0x4F, 
		0x04, 0x5A, 0xFF, 0xD1, 0x05, 0xFA, 0x01, 0x37, 0x06, 0xB9, 0x01, 0x3A, 0x04, 0x8E, 0x02, 0xB1, 
		0x02, 0x02, 0xFF, 0xA2, 0x01, 0x5D, 0x01, 0x1A, 0x05, 0x84, 0x01, 0x48, 0x04, 0x01, 0x01, 0xE7, 
		0xFF, 0xBF, 0x00, 0x39, 0x03, 0x25, 0x03, 0xCA, 0x00, 0x24, 0x00, 0x3E, 0x03, 0x01, 0xFE, 0xF9, 
		0x03, 0x17, 0xFE, 0xA6, 0x02, 0x7D, 0x02, 0xBB, 0xFF, 0x77, 0x02, 0x6C, 0x02, 0x16, 0x02, 0x1D, 
		0xFD, 0x21, 0x00, 0xC2, 0x02, 0xC7, 0x01, 0x2C, 0xFE, 0xF4, 0xFC, 0xA1, 0x03, 0x9E, 0x03, 0x01, 
		0xFD, 0x3C, 0xFE, 0x54, 0x01, 0xFA, 0x00, 0xAE, 0xFC, 0x84, 0xFD, 0x8A, 0x01, 0xB3, 0x02, 0x23, 
		0xFA, 0x65, 0xFE, 0xFE, 0x02, 0x6D, 0x01, 0xD7, 0xFC, 0x06, 0xFA, 0xA8, 0xFE, 0x77, 0x02, 0x09, 
		0xFC, 0x68, 0xFD, 0x52, 0xFF, 0xE7, 0x00, 0x14, 0xFC, 0x2A, 0xFB, 0x7C, 0x01, 0x54, 0x00, 0x09, 
		0xF9, 0xEA, 0xFB, 0x91, 0xFE, 0xA0, 0x00, 0x30, 0xF9, 0xD5, 0xFE, 0x6E, 0xFC, 0x89, 0x00, 0x06, 
		0xFB, 0x7C, 0xFC, 0x88, 0xFD, 0xDC, 0xFE, 0xA0, 0xF9, 0x95, 0xFB, 0x70, 0xFF, 0x61, 0x02, 0x62, 
		0xF8, 0x18, 0xFC, 0x3D, 0xFF, 0x1F, 0x00, 0xC1, 0xF9, 0x88, 0xF8, 0x58, 0xFF, 0x0B, 0xFE, 0x13, 
		0xFC, 0x3C, 0xF9, 0x70, 0xFC, 0x58, 0xFD, 0x85, 0xFA, 0xED, 0xF9, 0x30, 0xFA, 0x94, 0xFD, 0xA4, 
		0xF9, 0xFC, 0xFC, 0xBD, 0xFA, 0x8B, 0xFF, 0x79, 0xF9, 0xCC, 0xFE, 0xDE, 0xF9, 0x7A, 0xFD, 0x38, 
		0xF8, 0x25, 0xF9, 0xA0, 0xF9, 0x81, 0xFF, 0xE5, 0xF7, 0x2E, 0xFC, 0xD5, 0xFB, 0x7B, 0x00, 0xB8, 
		0xFB, 0x0F, 0x00, 0xBD, 0xFA, 0xA9, 0x02, 0x4A, 0xF8, 0x25, 0x00, 0xC9, 0xFC, 0xEA, 0x02, 0xC8, 
		0xFB, 0x46, 0x00, 0x03, 0xFB, 0xF7, 0x03, 0x28, 0xFB, 0x1D, 0x03, 0x3E, 0xFF, 0x91, 0x02, 0x7B, 
		0xF9, 0x9C, 0x01, 0xBF, 0xFE, 0x31, 0xFC, 0x4B, 0xFE, 0x43, 0xFC, 0x60, 0xFE, 0x08, 0xFB, 0x76, 
		0xFE, 0x0B, 0xFB, 0x45, 0x00, 0x90, 0xFE, 0xA1, 0xFE, 0x8C, 0xFB, 0xE4, 0xFE, 0xE5, 0xFB, 0xDD, 
		0xFE, 0xE9, 0xFB, 0x9D, 0xFD, 0xC1, 0xFA, 0x62, 0xFD, 0xB5, 0xF9, 0xB2, 0xFC, 0x59, 0xFC, 0x28, 
		0x00, 0xE5, 0x02, 0xB2, 0xFC, 0x67, 0xFD, 0x31, 0xFE, 0x6D, 0x05, 0x52, 0xFD, 0x53, 0xFE, 0x2F, 
		0x03, 0x6A, 0x01, 0x8D, 0xFE, 0x03, 0xFF, 0xD2, 0x01, 0x3D, 0x05, 0x36, 0xFE, 0x1B, 0x01, 0xC8, 
		0x03, 0x2D, 0x01, 0xB7, 0xFE, 0x65, 0x01, 0x53, 0x03, 0x82, 0x04, 0x2B, 0xFE, 0x57, 0x00, 0x2E, 
		0x05, 0xA1, 0x01, 0xF1, 0xFC, 0x73, 0xFC, 0xE0, 0x05, 0xB9, 0x04, 0x16, 0xFF, 0x02, 0xFE, 0xBF, 
		0x05, 0x96, 0x04, 0x8D, 0x00, 0x44, 0x01, 0x5E, 0x04, 0x0A, 0x02, 0x9A, 0x01, 0x72, 0x00, 0x0B, 
		0x05, 0x1F, 0x03, 0x16, 0x00, 0x8F, 0x00, 0xE8, 0x04, 0x11, 0x06, 0x1A, 0xFF, 0x8E, 0x02, 0x97, 
		0x06, 0x50, 0x04, 0x36, 0x01, 0xC6, 0x02, 0x43, 0x04, 0xFB, 0x04, 0x10, 0xFF, 0xB4, 0x03, 0x8D, 
		0x02, 0xF0, 0x04, 0x2B, 0x00, 0x99, 0x02, 0x00, 0x01, 0x5C, 0x04, 0xBE, 0x02, 0x66, 0x01, 0x81, 
		0x07, 0x33, 0x03, 0x28, 0x01, 0x0D, 0x04, 0x0A, 0x00, 0xCB, 0x04, 0x3E, 0x02, 0x8C, 0x03, 0xF9, 
		0x06, 0xF7, 0x04, 0x6A, 0x01, 0xAD, 0x05, 0x2F, 0x01, 0x83, 0x05, 0x68, 0xFF, 0xCF, 0x04, 0x9F, 
		0xFF, 0xB8, 0x04, 0xBF, 0xFE, 0x60, 0x03, 0xE9, 0x02, 0x20, 0x06, 0xD5, 0xFE, 0xA0, 0x04, 0xC7, 
		0xFE, 0x0A, 0x04, 0xAF, 0xFD, 0xB3, 0x02, 0x39, 0xFF, 0x1D, 0x06, 0x5E, 0xFF, 0x72, 0x06, 0x2A, 
		0xFF, 0x1A, 0x06, 0xB3, 0xFD, 0x36, 0x05, 0x08, 0xFC, 0xBA, 0x05, 0x76, 0x04, 0x6B, 0x05, 0x4D, 
		0xFF, 0x30, 0x04, 0xD0, 0x01, 0xB5, 0x03, 0xC5, 0xFC, 0x5F, 0x03, 0x32, 0x03, 0x2B, 0x05, 0x82, 
		0x03, 0x5B, 0x05, 0xE3, 0x00, 0xA4, 0x04, 0xBC, 0x05, 0x6B, 0x07, 0x01, 0x01, 0xE4, 0x07, 0x52, 
		0x01, 0xC8, 0x08, 0x0F, 0x03, 0xE4, 0x04, 0x92, 0x05, 0x2E, 0x05, 0x7A, 0x05, 0x24, 0x05, 0x50, 
		0x04, 0x6F, 0x04, 0xEE, 0x04, 0xD2, 0x06, 0x52, 0x05, 0x51, 0x06, 0xE8, 0x05, 0x8D, 0x04, 0xCB, 
		0x06, 0x30, 0x05, 0x43, 0x03, 0x56, 0x02, 0xA0, 0x06, 0x95, 0x06, 0x1E, 0x04, 0x73, 0x04, 0xF6, 
		0x07, 0xE0, 0x07, 0x21, 0x06, 0xED, 0x06, 0x2D, 0x05, 0xFC, 0x05, 0xB4, 0x05, 0xCF, 0x03, 0xB2, 
		0x06, 0x7B, 0x03, 0xFD, 0x06, 0xD0, 0x04, 0xBC, 0x05, 0x70, 0x03, 0xD1, 0x06, 0xEC, 0x04, 0x89, 
		0x07, 0x22, 0x04, 0x8C, 0x06, 0xB6, 0x05, 0x95, 0x07, 0xB5, 0x06, 0x37, 0x04, 0xA1, 0x03, 0x60, 
		0x08, 0x54, 0x04, 0x25, 0x07, 0x07, 0x03, 0x2E, 0x07, 0x2E, 0x02, 0xF5, 0x08, 0x38, 0x05, 0x23, 
		0x08, 0x06, 0x04, 0xEA, 0x08, 0x41, 0x03, 0x93, 0x09, 0x1B, 0x03, 0xA2, 0x05, 0xBB, 0x04, 0x7B, 
		0x0A, 0x1E, 0x05, 0x9F, 0x08, 0xC5, 0x06, 0xD0, 0x08, 0x2A, 0x06, 0x54, 0x09, 0x36, 0x05, 0xAE, 
		0x0A, 0x6A, 0x05, 0xE2, 0x07, 0x54, 0x07, 0x2D, 0x08, 0x16, 0x07, 0xB7, 0x06, 0xCB, 0x06, 0x29, 
		0x02, 0xAA, 0x05, 0x09, 0x06, 0x30, 0x07, 0xFD, 0x05, 0xAE, 0x08, 0x32, 0x09, 0xC2, 0x07, 0xD4, 
		0x0A, 0x97, 0x08, 0x12, 0x02, 0xD6, 0x06, 0x34, 0x0A, 0xC4, 0x09, 0x20, 0x00, 0xE4, 0x03, 0x4F, 
		0x09, 0x98, 0x06, 0x7B, 0x00, 0x24, 0x01, 0x2D, 0x07, 0x96, 0x07, 0xA5, 0xFE, 0x42, 0xFF, 0xA0, 
		0x08, 0x6A, 0x05, 0x74, 0x05, 0xFD, 0x04, 0x4D, 0x00, 0x0E, 0x02, 0x60, 0xFC, 0x65, 0xFD, 0x24, 
		0x05, 0x67, 0x07, 0xBE, 0x05, 0x41, 0x03, 0xB8, 0xFD, 0x58, 0x01, 0x41, 0x05, 0x01, 0x04, 0xF4, 
		0xF9, 0xC6, 0x01, 0x6D, 0x03, 0xAD, 0x03, 0xB2, 0xF9, 0x37, 0xFC, 0xCA, 0x09, 0x46, 0x0A, 0xE3, 
		0x07, 0x1D, 0x0A, 0xE4, 0xF8, 0xEC, 0xF7, 0x1D, 0xF8, 0xA9, 0xF6, 0x17, 0xF9, 0x98, 0xF8, 0xC8, 
		0xF9, 0x61, 0xF8, 0x2C, 0xFB, 0x3C, 0xF8, 0x88, 0xFB, 0x3B, 0xF7, 0xC6, 0xF9, 0xE9, 0xF9, 0xCC, 
		0xF9, 0xDB, 0xF9, 0xEC, 0xFB, 0x55, 0xF9, 0xB1, 0xFB, 0x38, 0xF9, 0x41, 0xFA, 0xB1, 0xFB, 0x81, 
		0xF9, 0xB0, 0xF8, 0x64, 0xFB, 0x06, 0xFA, 0x91, 0xFA, 0xE7, 0xFA, 0x85, 0xF9, 0xB9, 0xFB, 0x65, 
		0xF9, 0x74, 0xFA, 0xE1, 0xFA, 0x5D, 0xFA, 0x3A, 0xFA, 0xA9, 0xFC, 0x7E, 0xFB, 0x18, 0xFB, 0xDD, 
		0xFA, 0xCD, 0xFB, 0x92, 0xFC, 0x2A, 0xFB, 0x93, 0xFB, 0x83, 0xFA, 0x20, 0xFB, 0xC8, 0xFA, 0xE4, 
		0xFC, 0x04, 0xFB, 0x61, 0xFC, 0x2C, 0xFA, 0x32, 0xFC, 0x39, 0xFA, 0x29, 0xFC, 0x24, 0xFC, 0x66, 
		0xFB, 0xE9, 0xFB, 0xCB, 0xFC, 0xBA, 0xFB, 0x65, 0xFC, 0xA6, 0xFB, 0x3A, 0xFB, 0x95, 0xFB, 0xEF, 
		0xFB, 0xD8, 0xFD, 0x01, 0xFC, 0x98, 0xFB, 0x7B, 0xFD, 0x43, 0xFC, 0x90, 0xFD, 0x3E, 0xFC, 0x76, 
		0xFC, 0xFA, 0xFC, 0x08, 0xFD, 0xBE, 0xFB, 0xC8, 0xFC, 0xDF, 0xFA, 0x3A, 0xFD, 0xB1, 0xFB, 0xA9, 
		0xFD, 0xB0, 0xFB, 0x86, 0xFD, 0x37, 0xFA, 0x94, 0xFD, 0x80, 0xFA, 0xA0, 0xFD, 0xAB, 0xFB, 0xDD, 
		0xFE, 0x60, 0xFC, 0x79, 0xFD, 0x52, 0xFC, 0xC0, 0xFD, 0x6B, 0xFD, 0x3C, 0xFE, 0x44, 0xFC, 0x9C, 
		0xFE, 0x16, 0xFC, 0x67, 0xFE, 0x8A, 0xFC, 0xF8, 0xFD, 0x95, 0xFB, 0x6E, 0xFD, 0xB7, 0xFD, 0xDB, 
		0xFC, 0xFF, 0xFC, 0xE5, 0xFE, 0x4D, 0xFD, 0x6D, 0xFD, 0xEE, 0xFD, 0x1B, 0xFE, 0x0E, 0xFC, 0xBB, 
		0xFE, 0x9B, 0xFD, 0xAB, 0xFE, 0xE9, 0xFC, 0x99, 0xFF, 0x0D, 0xFC, 0x89, 0xFE, 0xE6, 0xFD, 0x67, 
		0xFE, 0xE8, 0xFD, 0x65, 0xFF, 0x5B, 0xFD, 0xD0, 0xFE, 0x76, 0xFC, 0x79, 0xFE, 0x96, 0xFE, 0x66, 
		0xFE, 0x40, 0xFD, 0xB9, 0xFE, 0x67, 0xFD, 0xC2, 0xFE, 0xC7, 0xFE, 0x9B, 0xFD, 0x83, 0xFD, 0xDC, 
		0xFD, 0xC6, 0xFE, 0x4C, 0xFC, 0x80, 0xFE, 0x08, 0xFE, 0x82, 0xFD, 0x0B, 0xFF, 0xC6, 0xFE, 0x1F, 
		0xFF, 0x5B, 0xFD, 0x96, 0xFF, 0x41, 0xFE, 0x8A, 0xFF, 0x16, 0xFE, 0x82, 0xFF, 0x22, 0xFD, 0x55, 
		0xFF, 0xE7, 0xFE, 0x20, 0xFE, 0x5E, 0xFE, 0x99, 0xFD, 0x26, 0xFE, 0x9F, 0xFE, 0xBC, 0xFF, 0x63, 
		0xFE, 0x50, 0xFE, 0xBE, 0xFE, 0x76, 0xFE, 0xD1, 0xFE, 0xE4, 0xFF, 0x98, 0xFD, 0xA7, 0xFE, 0xDF, 
		0xFD, 0xD4, 0xFF, 0x3C, 0xFD, 0xB4, 0xFF, 0x6A, 0xFD, 0x6D, 0xFD, 0xA0, 0xFE, 0x27, 0xFF, 0xE8, 
		0xFF, 0xBC, 0xFE, 0x40, 0xFE, 0x26, 0xFF, 0xF8, 0xFE, 0x06, 0xFF, 0xD3, 0xFD, 0x14, 0xFF, 0x48, 
		0xFC, 0xB4, 0xFF, 0x04, 0xFC, 0x7B, 0xFF, 0xA5, 0xFD, 0xB8, 0xFF, 0x9F, 0xFD, 0x74, 0x00, 0x8A, 
		0xFD, 0x04, 0xFF, 0x7D, 0xFD, 0x5A, 0xFF, 0xF4, 0xFD, 0x62, 0x00, 0xA5, 0xFE, 0xFD, 0xFF, 0xFD, 
		0xFC, 0xB8, 0xFF, 0x95, 0xFC, 0x73, 0x00, 0x25, 0xFC, 0x20, 0x00, 0x2C, 0xFC, 0xAA, 0xFE, 0x61, 
		0xFC, 0xB9, 0x00, 0x0D, 0xFC, 0x17, 0xFE, 0xF1, 0xFB, 0xFE, 0xFE, 0xCB, 0xFC, 0xE2, 0xFE, 0x22, 
		0xFC, 0xC0, 0xFE, 0x18, 0xFC, 0x51, 0x00, 0xA8, 0xFB, 0xA8, 0xFE, 0x7D, 0xFB, 0x5F, 0xFF, 0x9B, 
		0xFB, 0x61, 0xFF, 0xD8, 0xFC, 0x53, 0xFE, 0xC4, 0xFB, 0xFA, 0xFC, 0xFE, 0xFB, 0xEC, 0xFD, 0x8F, 
		0xFB, 0xC7, 0xFD, 0xE6, 0xFB, 0x38, 0xFE, 0xD5, 0xFA, 0xE0, 0xFE, 0x4C, 0xFB, 0x53, 0xFD, 0x69, 
		0xFB, 0x71, 0xFF, 0x5F, 0xFB, 0x40, 0xFD, 0x4E, 0xFB, 0x2B, 0xFC, 0xC1, 0xFA, 0x68, 0xFD, 0x30, 
		0xFA, 0x85, 0xFE, 0x13, 0xFC, 0x7E, 0xFD, 0x1C, 0xFC, 0x66, 0xFC, 0xDF, 0xFB, 0xB2, 0xFE, 0x6E, 
		0xF9, 0xD5, 0xFC, 0x3C, 0xFB, 0xDB, 0xFD, 0x82, 0xFB, 0x0B, 0xFA, 0x62, 0xFA, 0x25, 0xFC, 0x5A, 
		0xFA, 0x22, 0xFC, 0x81, 0xF9, 0xC2, 0xFD, 0xCC, 0xF9, 0x45, 0xFD, 0x33, 0xFD, 0xA2, 0xFD, 0xAB, 
		0xFB, 0x72, 0xFB, 0xC3, 0xFA, 0xA7, 0xFE, 0x2C, 0xF8, 0x66, 0xFA, 0x2B, 0xF8, 0xD2, 0xFC, 0x47, 
		0xF8, 0x74, 0xFC, 0x5D, 0xFA, 0x25, 0xFF, 0x44, 0xF9, 0x9D, 0xFE, 0x5B, 0xFA, 0x4F, 0xFE, 0xAE, 
		0xFA, 0x58, 0xFF, 0xEA, 0xF8, 0x6A, 0xFE, 0x5A, 0xF8, 0x2A, 0xFF, 0x07, 0xFE, 0x10, 0xFF, 0x8E, 
		0xF8, 0x8A, 0xFD, 0x0D, 0xFA, 0xF7, 0x00, 0xAE, 0xFA, 0x55, 0xFF, 0x93, 0xFE, 0x1E, 0xFE, 0xFF, 
		0xFB, 0x3B, 0xFE, 0x04, 0xF9, 0xAF, 0x00, 0x97, 0xF9, 0x62, 0x00, 0xD0, 0xFD, 0x72, 0x00, 0x6B, 
		0xF9, 0x8D, 0x00, 0x1D, 0xFB, 0x8B, 0x01, 0x17, 0xFB, 0x41, 0x01, 0x32, 0xFB, 0x34, 0xFE, 0x06, 
		0xFD, 0x26, 0xFF, 0x51, 0xFB, 0x2C, 0xFF, 0x9B, 0xFC, 0x37, 0x02, 0x27, 0xFC, 0x9A, 0x01, 0x16, 
		0xFC, 0xC9, 0x01, 0x3B, 0xFD, 0xCD, 0x01, 0x78, 0xFB, 0xE5, 0x00, 0xE4, 0xFE, 0x05, 0x01, 0x18, 
		0xFD, 0xA9, 0x01, 0x19, 0xFD, 0x0A, 0x00, 0xFD, 0xFE, 0xCF, 0x01, 0x7B, 0xFD, 0x0D, 0xFF, 0x7A, 
		0xFD, 0x9D, 0x02, 0x94, 0xFC, 0xC8, 0x02, 0x18, 0xFC, 0xCF, 0x02, 0x86, 0xFE, 0x63, 0x00, 0x31, 
		0xFE, 0xAB, 0x00, 0xB1, 0xFE, 0x3B, 0x02, 0x0E, 0xFE, 0x1E, 0x02, 0x4D, 0xFF, 0xB9, 0x01, 0x53, 
		0xFD, 0x6F, 0x01, 0x08, 0xFF, 0x0C, 0x01, 0x27, 0xFF, 0x13, 0x01, 0x3B, 0xFE, 0x7D, 0x02, 0x39, 
		0xFE, 0x06, 0xFF, 0xF7, 0xFE, 0x87, 0x00, 0x0E, 0xFF, 0x60, 0x02, 0x95, 0xFF, 0x28, 0x00, 0x28, 
		0xFE, 0xCC, 0xFF, 0xD2, 0x00, 0x5F, 0x00, 0xD6, 0xFF, 0x0E, 0x00, 0xA7, 0xFF, 0xAA, 0x00, 0xC0, 
		0xFF, 0xC8, 0x00, 0x1B, 0xFF, 0xB4, 0x00, 0x1F, 0x00, 0x24, 0x01, 0x35, 0xFF, 0x96, 0xFF, 0x4A, 
		0xFF, 0x8F, 0x00, 0x4A, 0xFE, 0x47, 0xFF, 0xEA, 0x00, 0x17, 0x00, 0x8B, 0x00, 0x51, 0xFF, 0xF5, 
		0x00, 0x2C, 0x00, 0x0F, 0xFF, 0xA9, 0xFF, 0x77, 0xFF, 0x8A, 0xFF, 0x31, 0xFF, 0x62, 0xFF, 0xC6, 
		0x01, 0x10, 0xFF, 0xA4, 0xFF, 0x64, 0xFE, 0x47, 0x00, 0x08, 0xFF, 0x78, 0x00, 0x80, 0xFF, 0x23, 
		0x00, 0x65, 0xFF, 0x26, 0x00, 0x28, 0xFF, 0x3B, 0xFF, 0xB4, 0xFE, 0x38, 0x00, 0x09, 0xFE, 0x43, 
		0x00, 0x21, 0xFE, 0x59, 0x00, 0xE2, 0x00, 0x3C, 0x00, 0x49, 0xFF, 0x22, 0x00, 0x9C, 0xFE, 0x71, 
		0x01, 0x18, 0xFE, 0xC2, 0x00, 0xF5, 0xFE, 0xAB, 0x00, 0xA6, 0xFE, 0x0D, 0x01, 0x53, 0xFF, 0x42, 
		0x01, 0x47, 0xFF, 0x25, 0x01, 0x45, 0xFF, 0x77, 0xFF, 0xA7, 0xFD, 0xAC, 0x00, 0x64, 0xFD, 0x8D, 
		0x00, 0x90, 0xFD, 0x5B, 0x01, 0xE7, 0x00, 0x1C, 0x00, 0xFC, 0xFE, 0x79, 0x00, 0xD6, 0xFF, 0xD7, 
		0x01, 0x1A, 0xFF, 0xE4, 0x00, 0x63, 0xFE, 0xE2, 0x01, 0x4B, 0x00, 0x31, 0x01, 0xCB, 0xFE, 0x7C, 
		0x02, 0x35, 0xFE, 0x8F, 0x01, 0xB4, 0x00, 0x1C, 0x01, 0x50, 0xFF, 0xF7, 0x01, 0x8D, 0xFF, 0x59, 
		0x02, 0x6A, 0x00, 0x22, 0x02, 0x54, 0xFF, 0xEF, 0x02, 0x31, 0xFF, 0x74, 0x01, 0x2B, 0x00, 0x4F, 
		0x02, 0x0A, 0x00, 0x7D, 0x00, 0xCB, 0x00, 0x02, 0x00, 0xF4, 0x01, 0x20, 0x00, 0xFF, 0x00, 0xD3, 
		0x00, 0xAF, 0x00, 0x52, 0x02, 0x54, 0x00, 0xBB, 0x02, 0x05, 0x00, 0x6C, 0x01, 0x7D, 0x00, 0xFF, 
		0x01, 0x6D, 0x01, 0x29, 0x01, 0xF1, 0x01, 0x60, 0x01, 0x47, 0xFF, 0xAE, 0x00, 0x19, 0x00, 0xD2, 
		0x01, 0x73, 0x00, 0xF5, 0x01, 0x05, 0x00, 0x03, 0x02, 0x21, 0x01, 0xC1, 0x00, 0x8C, 0x01, 0x26, 
		0x00, 0x2C, 0x01, 0x27, 0x00, 0xD4, 0x01, 0x5B, 0x00, 0xF4, 0x01, 0xEE, 0x01, 0x4B, 0x02, 0x10, 
		0x00, 0xC9, 0x01, 0x33, 0x01, 0x5D, 0x01, 0x9B, 0x02, 0x65, 0x01, 0x1C, 0x02, 0x66, 0x01, 0x9D, 
		0x01, 0xD0, 0x01, 0x42, 0x02, 0x70, 0x01, 0x8D, 0x00, 0x61, 0x00, 0xC8, 0xFF, 0x60, 0x01, 0x80, 
		0x00, 0x95, 0x01, 0x6A, 0x01, 0xEF, 0x02, 0x0D, 0x01, 0x0D, 0x02, 0x49, 0x00, 0x21, 0x01, 0xEB, 
		0xFF, 0x87, 0x01, 0xB1, 0x01, 0xAB, 0x02, 0x63, 0x01, 0xF2, 0x02, 0x04, 0x00, 0xAB, 0x01, 0xBB, 
		0x01, 0xF1, 0x02, 0x9A, 0x01, 0xB8, 0x01, 0x13, 0x02, 0x36, 0x02, 0x3F, 0x00, 0x92, 0x02, 0x7F, 
		0x00, 0x9B, 0x02, 0x9E, 0xFF, 0xDF, 0x00, 0xAD, 0x00, 0xD4, 0x02, 0xB8, 0xFF, 0x5A, 0x02, 0x59, 
		0xFF, 0x41, 0x02, 0xB7, 0xFE, 0x17, 0x01, 0xF7, 0x00, 0xAF, 0x02, 0xE6, 0x00, 0xD6, 0x01, 0xDC, 
		0x01, 0x74, 0x04, 0x3B, 0x02, 0x42, 0x02, 0x12, 0x02, 0x4A, 0x03, 0x09, 0x01, 0xA9, 0x03, 0x6A, 
		0x01, 0x3B, 0x03, 0x49, 0x01, 0x76, 0x03, 0x50, 0xFF, 0x5B, 0x02, 0x35, 0x00, 0x23, 0x03, 0xDF, 
		0xFF, 0xD9, 0x04, 0x26, 0x01, 0x49, 0x02, 0xC8, 0x03, 0x12, 0x03, 0x48, 0x02, 0x85, 0x03, 0x1B, 
		0x02, 0x95, 0x02, 0xA4, 0x02, 0x3B, 0x03, 0x96, 0x02, 0x78, 0x04, 0x37, 0x02, 0xA1, 0x03, 0x31, 
		0x01, 0x3E, 0x01, 0x84, 0x03, 0x6A, 0x03, 0xF4, 0x02, 0x34, 0x03, 0x50, 0x03, 0x70, 0x02, 0x6C, 
		0x02, 0x2D, 0x01, 0xDF, 0x02, 0x9F, 0x01, 0xC5, 0x02, 0xB4, 0x01, 0xD4, 0x03, 0x48, 0x02, 0x82, 
		0x03, 0x4C, 0x02, 0x85, 0x01, 0xFA, 0x01, 0xAC, 0x03, 0x81, 0x02, 0x37, 0x03, 0x45, 0x01, 0x83, 
		0x03, 0xC2, 0x01, 0xF3, 0x02, 0xB3, 0x02, 0x31, 0x03, 0xAB, 0x03, 0x9E, 0x03, 0x0F, 0x01, 0x28, 
		0x03, 0x16, 0x01, 0x0C, 0x04, 0x04, 0x02, 0x12, 0x03, 0x6A, 0x01, 0x49, 0x02, 0x24, 0x00, 0x8F, 
		0x02, 0xA3, 0x01, 0x23, 0x01, 0xF7, 0x00, 0x42, 0x04, 0x11, 0x01, 0x67, 0x03, 0x12, 0x00, 0x61, 
		0x03, 0x25, 0x00, 0x21, 0x03, 0x45, 0x01, 0xD6, 0x01, 0xFF, 0x00, 0x31, 0x04, 0x44, 0x01, 0x47, 
		0x04, 0x96, 0x01, 0x43, 0x00, 0x03, 0x00, 0xF2, 0x03, 0x68, 0x01, 0xDA, 0x02, 0xB1, 0x01, 0xAD, 
		0x05, 0x31, 0x02, 0xA6, 0x04, 0x12, 0x02, 0x6C, 0x04, 0x55, 0x02, 0x98, 0x01, 0x41, 0x00, 0xC1, 
		0x03, 0x79, 0x03, 0xB6, 0x04, 0x81, 0x03, 0x6A, 0x03, 0x7D, 0x02, 0x7B, 0x03, 0x6D, 0x03, 0x5E, 
		0x03, 0xB4, 0x03, 0x91, 0x05, 0x0D, 0x02, 0x99, 0x05, 0x28, 0x02, 0x7F, 0x03, 0xE5, 0x03, 0x19, 
		0x05, 0x7A, 0x04, 0x06, 0x04, 0x98, 0x03, 0xF4, 0x04, 0x56, 0x03, 0xBF, 0x05, 0x82, 0x03, 0x9D, 
		0x05, 0x7B, 0x03, 0x93, 0x02, 0x1F, 0x03, 0x5E, 0x04, 0x5C, 0x04, 0xC6, 0x03, 0x43, 0x04, 0xA6, 
		0x03, 0x43, 0x04, 0xA6, 0x03, 0xBF, 0x04, 0x7C, 0x04, 0x7B, 0x05, 0x60, 0x05, 0x14, 0x04, 0xA9, 
		0x05, 0x87, 0x04, 0xCF, 0x05, 0x37, 0x05, 0x3D, 0x02, 0xEA, 0x04, 0x44, 0x06, 0xAF, 0x05, 0x03, 
		0x05, 0x6D, 0x04, 0x31, 0x05, 0x36, 0x06, 0x1E, 0x04, 0x81, 0x05, 0xC3, 0x06, 0x6D, 0x04, 0x71, 
		0x07, 0x21, 0x04, 0xC4, 0x04, 0x20, 0x05, 0x66, 0x05, 0xF1, 0x06, 0xC2, 0x06, 0x60, 0x06, 0x09, 
		0x06, 0x54, 0x06, 0x06, 0x03, 0x57, 0x06, 0x3C, 0x03, 0x61, 0x06, 0x83, 0x02, 0xB5, 0x03, 0x75, 
		0x06, 0xB4, 0x05, 0xEF, 0x04, 0x8F, 0x05, 0x10, 0x08, 0xA1, 0x06, 0xE0, 0x07, 0xA0, 0x05, 0xD5, 
		0x07, 0xE4, 0x05, 0xCA, 0x05, 0xFE, 0x07, 0x4A, 0x06, 0x9E, 0x07, 0xD8, 0x06, 0x1E, 0x02, 0xEC, 
		0x06, 0xE1, 0x03, 0x39, 0x01, 0x26, 0x05, 0x70, 0x04, 0x3C, 0x08, 0x0A, 0x02, 0x6D, 0x05, 0x23, 
		0x01, 0x6D, 0x05, 0x07, 0x00, 0xC6, 0x04, 0x04, 0x01, 0xE8, 0x05, 0x80, 0x00, 0xF9, 0x01, 0x93, 
		0x03, 0xF6, 0x06, 0x19, 0x01, 0x44, 0x01, 0x6B, 0x06, 0x6D, 0x04, 0x14, 0x00, 0xC1, 0x01, 0x6F, 
		0x07, 0xF2, 0x07, 0x43, 0xFF, 0x05, 0x02, 0x43, 0x02, 0xEE, 0x03, 0xE2, 0xFF, 0x0D, 0x00, 0x1E, 
		0x05, 0x2D, 0x03, 0x6F, 0xFF, 0xE4, 0xFF, 0x57, 0x02, 0x70, 0x03, 0x95, 0xFE, 0x3B, 0x00, 0x9F, 
		0x00, 0xBA, 0x05, 0x5A, 0xFD, 0x9A, 0x00, 0x06, 0x02, 0x19, 0x01, 0x88, 0xFF, 0xA2, 0xFE, 0xDD, 
		0x03, 0x0D, 0x00, 0xE5, 0xFF, 0x80, 0xFE, 0xD6, 0x00, 0xF5, 0x01, 0xEB, 0xFD, 0x43, 0xFD, 0x78, 
		0x03, 0xCC, 0x03, 0x15, 0xFE, 0x0B, 0xFD, 0x80, 0x00, 0xB2, 0x00, 0xFF, 0xFE, 0x93, 0xFE, 0x7A, 
		0xFF, 0x01, 0x01, 0x3D, 0xFC, 0x42, 0xFE, 0xDA, 0xFF, 0x41, 0x00, 0xE4, 0xFC, 0xF9, 0xFE, 0x41, 
		0x00, 0x9D, 0xFF, 0x13, 0xFD, 0x6F, 0xFD, 0x30, 0xFE, 0x69, 0x00, 0x5C, 0xFF, 0x8B, 0xFD, 0x9D, 
		0x01, 0x4E, 0xFF, 0x1A, 0xFD, 0x59, 0xFB, 0xC4, 0xFF, 0x70, 0xFE, 0xC3, 0xFC, 0x7B, 0xFC, 0xA3, 
		0xFD, 0x1E, 0xFE, 0x98, 0xFF, 0xAB, 0xFD, 0x29, 0xFF, 0xA6, 0xFC, 0xED, 0x00, 0x64, 0xFF, 0xEA, 
		0xFE, 0x79, 0xFE, 0xF9, 0xFF, 0xC8, 0xFF, 0xB7, 0xFE, 0xAF, 0xFD, 0x0E, 0x00, 0x05, 0xFF, 0x43, 
		0xFD, 0x3E, 0xFD, 0x90, 0x00, 0x59, 0xFE, 0xA8, 0xFF, 0x79, 0xFB, 0xA7, 0xFE, 0x9F, 0xFF, 0x13, 
		0xFD, 0x54, 0xFB, 0x91, 0xFE, 0xED, 0xFB, 0xB2, 0xFE, 0xF3, 0xFB, 0x4D, 0x00, 0x98, 0x00, 0x91, 
		0xFD, 0x2E, 0xFB, 0x30, 0x00, 0x31, 0x00, 0x50, 0xFB, 0x20, 0xFC, 0xF8, 0xFF, 0x08, 0x01, 0x87, 
		0xFD, 0x24, 0xFD, 0xDD, 0x01, 0xD5, 0x00, 0xDA, 0xFF, 0x01, 0xFC, 0xA0, 0x00, 0x45, 0x01, 0x6E, 
		0xFF, 0x5A, 0xFE, 0x1B, 0xFD, 0x50, 0x00, 0xBF, 0xFB, 0x44, 0xFB, 0x54, 0xFF, 0x56, 0xFF, 0x57, 
		0xFA, 0xE4, 0xF9, 0xA1, 0x01, 0x41, 0x01, 0xD6, 0xFA, 0x75, 0xFB, 0x25, 0xFF, 0xC0, 0x01, 0x10, 
		0xFA, 0xAF, 0xFF, 0x08, 0x01, 0xEC, 0x02, 0x35, 0xFD, 0x2F, 0xFD, 0x9F, 0x00, 0xC3, 0x01, 0xE5, 
		0xFD, 0xC3, 0xFF, 0x7B, 0x01, 0xAB, 0x00, 0xCA, 0xFF, 0x55, 0xFF, 0x8A, 0x00, 0xC7, 0x02, 0x3F, 
		0x00, 0x02, 0xFF, 0xE1, 0x02, 0xB6, 0x02, 0xF3, 0xFA, 0xAA, 0xFF, 0xD9, 0x02, 0x28, 0x02, 0x2D, 
		0xFE, 0x17, 0x01, 0x0F, 0x02, 0xA8, 0x02, 0x19, 0x00, 0x0D, 0xFE, 0x3B, 0x03, 0x57, 0x03, 0xBA, 
		0xFF, 0x7B, 0xFF, 0xCC, 0xFF, 0xAF, 0x02, 0xE2, 0xFB, 0x6F, 0x02, 0x7D, 0x04, 0x1F, 0x04, 0x23, 
		0xFF, 0xA1, 0x02, 0xA4, 0x04, 0xEB, 0x04, 0x39, 0x01, 0xE9, 0x01, 0x31, 0xFE, 0x3F, 0x03, 0xBA, 
		0xFD, 0xEA, 0x03, 0xE4, 0xFC, 0x37, 0x03, 0x62, 0xFB, 0xDE, 0x04, 0x23, 0xFA, 0xF2, 0x02, 0x6A, 
		0xFA, 0x78, 0x02, 0x69, 0xFE, 0x36, 0x05, 0x56, 0xFF, 0x61, 0x07, 0x1D, 0xFC, 0xFA, 0xFD, 0xF0, 
		0xFF, 0xF2, 0x04, 0x56, 0xFB, 0x4E, 0xFC, 0x7B, 0xFC, 0xFC, 0x01, 0xB1, 0xFB, 0x18, 0xFB, 0x19, 
		0xFC, 0x0D, 0xFE, 0xD2, 0xFD, 0xA6, 0xFD, 0xB7, 0xFD, 0x09, 0xF9, 0xAE, 0xFD, 0x08, 0xF9, 0xF3, 
		0xFC, 0xB8, 0xF8, 0x7F, 0xFC, 0xD0, 0xFD, 0xE5, 0xF9, 0x17, 0xF7, 0x45, 0xFF, 0x1D, 0xFF, 0xDC, 
		0xF8, 0x0E, 0xF8, 0xD9, 0xF7, 0xC5, 0xFB, 0x9A, 0xF6, 0x59, 0xF8, 0xE8, 0xFA, 0x42, 0x00, 0xFC, 
		0xF5, 0x73, 0xFE, 0x61, 0xFD, 0xC5, 0xFE, 0x2D, 0x05, 0xE5, 0x06, 0x12, 0x08, 0x84, 0x07, 0xB7, 
		0x09, 0x16, 0x07, 0xE4, 0xF8, 0xBF, 0xF9, 0x6F, 0xF8, 0xBF, 0xF9, 0x25, 0xF7, 0xF8, 0xFB, 0x82, 
		0xF7, 0xAA, 0xF9, 0x8A, 0xF9, 0xAD, 0xFB, 0xB5, 0xF9, 0x58, 0xFB, 0x95, 0xFA, 0xBF, 0xF9, 0xB8, 
		0xFA, 0xB1, 0xF9, 0x9A, 0xFA, 0xC6, 0xFA, 0xF3, 0xFA, 0xD3, 0xFB, 0x0F, 0xF9, 0x80, 0xF9, 0x8F, 
		0xFA, 0x31, 0xFC, 0xAD, 0xFA, 0xBE, 0xF8, 0xD8, 0xFA, 0x7B, 0xF7, 0x74, 0xFA, 0xFE, 0xFD, 0x57, 
		0xF9, 0x07, 0xF9, 0x8F, 0xFC, 0x3A, 0xFB, 0xC6, 0xFB, 0x61, 0xF9, 0x74, 0xFB, 0xE2, 0xFB, 0xCF, 
		0xFB, 0x8A, 0xFB, 0x7A, 0xFB, 0x49, 0xFD, 0x18, 0xFB, 0x06, 0xFC, 0x1B, 0xFC, 0x5A, 0xFA, 0x99, 
		0xFC, 0x61, 0xFA, 0x78, 0xFC, 0x0E, 0xFA, 0xE7, 0xFC, 0xF1, 0xFC, 0x45, 0xFB, 0xE7, 0xFC, 0x7C, 
		0xFC, 0x1F, 0xFC, 0xCF, 0xFD, 0x1F, 0xFC, 0xC9, 0xFC, 0x34, 0xFB, 0x5B, 0xFD, 0x1E, 0xFB, 0xBA, 
		0xFD, 0x1E, 0xFB, 0x7E, 0xFC, 0xF0, 0xFC, 0xDF, 0xFC, 0xD6, 0xFC, 0xEE, 0xFC, 0x84, 0xFD, 0xF8, 
		0xFC, 0x18, 0xFC, 0xCE, 0xFD, 0x7C, 0xFC, 0x3B, 0xFD, 0xBF, 0xFC, 0x8E, 0xFD, 0xE3, 0xFD, 0x4A, 
		0xFD, 0x61, 0xFC, 0x6B, 0xFD, 0xAD, 0xFD, 0x7E, 0xFD, 0x7A, 0xFD, 0x99, 0xFC, 0x44, 0xFD, 0x93, 
		0xFC, 0x63, 0xFD, 0xFD, 0xFD, 0x29, 0xFE, 0x1D, 0xFC, 0xD1, 0xFE, 0x1B, 0xFC, 0xB8, 0xFD, 0xBE, 
		0xFE, 0x48, 0xFD, 0x37, 0xFD, 0xBE, 0xFE, 0xBB, 0xFD, 0x6F, 0xFD, 0x62, 0xFE, 0x7E, 0xFD, 0xC6, 
		0xFE, 0x47, 0xFD, 0x66, 0xFD, 0xFE, 0xFC, 0xED, 0xFE, 0x78, 0xFD, 0xEF, 0xFD, 0xF6, 0xFE, 0x3B, 
		0xFE, 0x19, 0xFE, 0x59, 0xFD, 0x98, 0xFD, 0xB7, 0xFD, 0x97, 0xFF, 0x63, 0xFD, 0x6A, 0xFE, 0xF4, 
		0xFD, 0x58, 0xFE, 0xA4, 0xFE, 0xBE, 0xFE, 0xBD, 0xFD, 0x88, 0xFE, 0x44, 0xFE, 0xD0, 0xFE, 0x52, 
		0xFE, 0xB4, 0xFE, 0x36, 0xFE, 0xEB, 0xFE, 0x2C, 0xFD, 0x6D, 0xFC, 0xE7, 0xFE, 0xC1, 0xFD, 0x84, 
		0xFF, 0x1D, 0xFD, 0xD6, 0xFE, 0x8B, 0xFE, 0xA5, 0xFE, 0xB2, 0xFF, 0x2E, 0xFE, 0x38, 0xFF, 0x40, 
		0xFD, 0xEE, 0xFF, 0x0E, 0xFF, 0x28, 0xFF, 0x3A, 0xFE, 0x92, 0xFE, 0x8E, 0xFE, 0xAE, 0xFF, 0x5F, 
		0xFE, 0x67, 0xFD, 0x14, 0xFF, 0x95, 0xFE, 0x84, 0xFE, 0xDA, 0xFD, 0x7D, 0xFF, 0x21, 0xFD, 0x67, 
		0xFF, 0x16, 0xFD, 0x1B, 0xFF, 0x73, 0xFE, 0x10, 0xFF, 0x7E, 0xFE, 0x02, 0xFF, 0x75, 0xFE, 0xB9, 
		0xFF, 0x54, 0xFE, 0xCF, 0xFE, 0xCE, 0xFD, 0xBC, 0xFF, 0x5C, 0xFE, 0xF9, 0xFE, 0xFA, 0xFF, 0x54, 
		0xFF, 0xBD, 0xFE, 0x6E, 0x00, 0x1F, 0xFE, 0x92, 0xFF, 0xF6, 0xFE, 0x4C, 0xFF, 0xAA, 0xFD, 0xF1, 
		0x00, 0x47, 0xFE, 0x87, 0xFF, 0xEA, 0xFD, 0x9F, 0xFF, 0xF4, 0xFD, 0x5A, 0xFF, 0xBD, 0xFE, 0xC1, 
		0x00, 0x3F, 0xFF, 0x41, 0x00, 0x23, 0xFF, 0x4B, 0xFF, 0xD9, 0xFF, 0x0E, 0x00, 0x7E, 0xFF, 0x59, 
		0xFF, 0x74, 0xFD, 0xE0, 0x00, 0x9B, 0xFE, 0xD7, 0x00, 0xAE, 0xFE, 0xD7, 0x00, 0x26, 0xFF, 0xF8, 
		0x00, 0x75, 0xFE, 0x84, 0x00, 0xC5, 0xFE, 0x3C, 0x00, 0xF0, 0xFD, 0xF6, 0x00, 0xDF, 0xFF, 0x99, 
		0x00, 0x6E, 0xFF, 0x45, 0x00, 0x57, 0xFF, 0x65, 0x00, 0xA9, 0xFF, 0xD1, 0x00, 0x9D, 0x00, 0x1A, 
		0xFF, 0xAD, 0xFF, 0x9C, 0x00, 0x80, 0x00, 0x50, 0x00, 0xD1, 0xFF, 0xC2, 0x00, 0x06, 0x00, 0x07, 
		0x00, 0x16, 0x00, 0x05, 0x01, 0x3E, 0xFF, 0xEC, 0x00, 0xF8, 0xFF, 0xD3, 0xFF, 0x38, 0xFF, 0xC1, 
		0x00, 0x9C, 0xFF, 0xBB, 0x00, 0xFA, 0xFF, 0x49, 0x01, 0x71, 0xFF, 0x82, 0xFF, 0x8F, 0xFF, 0xB4, 
		0xFF, 0x72, 0xFF, 0x86, 0xFF, 0xC0, 0xFF, 0x02, 0xFF, 0xE1, 0x00, 0x23, 0xFF, 0x4F, 0xFF, 0xB9, 
		0xFF, 0xF9, 0x00, 0xAB, 0x00, 0x5D, 0x00, 0x1B, 0x00, 0x6C, 0x00, 0xD4, 0xFE, 0xB6, 0xFF, 0x2F, 
		0xFF, 0x85, 0xFF, 0xBA, 0xFE, 0xE9, 0x00, 0x5F, 0xFF, 0xA0, 0x00, 0x14, 0xFF, 0x44, 0xFF, 0xC3, 
		0xFE, 0xC6, 0x00, 0x57, 0xFE, 0xD4, 0xFF, 0xB2, 0xFE, 0x9E, 0xFF, 0x7A, 0x00, 0x0B, 0x00, 0x7A, 
		0xFF, 0x74, 0x00, 0x7A, 0xFE, 0xED, 0x00, 0x98, 0xFE, 0xDB, 0x00, 0x8C, 0xFF, 0xAE, 0x00, 0x8A, 
		0xFE, 0xBF, 0xFF, 0x91, 0xFE, 0x20, 0xFF, 0x64, 0xFE, 0x99, 0x00, 0x4C, 0xFF, 0x02, 0xFF, 0xD8, 
		0xFD, 0x85, 0xFF, 0xA0, 0xFD, 0xF6, 0x00, 0x4F, 0xFE, 0x05, 0x00, 0x08, 0xFE, 0xF4, 0x01, 0x2F, 
		0xFD, 0xE5, 0x00, 0x44, 0xFE, 0x42, 0x00, 0x3D, 0xFD, 0xF6, 0x01, 0x32, 0x00, 0x6F, 0x00, 0xBD, 
		0xFE, 0x4D, 0x00, 0x7A, 0xFE, 0x85, 0x00, 0xA6, 0xFD, 0xC5, 0xFE, 0x72, 0xFD, 0x88, 0xFF, 0xB6, 
		0xFD, 0x15, 0xFF, 0xA1, 0xFE, 0x39, 0x00, 0xC2, 0xFC, 0x48, 0x00, 0x53, 0xFC, 0xE2, 0x00, 0xC0, 
		0xFD, 0x0D, 0x00, 0xC0, 0xFC, 0xF3, 0xFF, 0x5E, 0xFD, 0x95, 0x00, 0xEA, 0xFD, 0x69, 0xFE, 0xD7, 
		0xFE, 0x18, 0xFF, 0x93, 0xFC, 0x3C, 0xFF, 0x7C, 0xFC, 0xBA, 0xFF, 0xBC, 0xFC, 0xB5, 0x00, 0x3A, 
		0xFB, 0xA8, 0xFF, 0xAA, 0xFC, 0xDB, 0xFE, 0xD5, 0xFC, 0x50, 0xFF, 0x03, 0xFC, 0xF6, 0xFF, 0xCE, 
		0xFC, 0x3B, 0xFD, 0xDB, 0xFE, 0xA0, 0xFF, 0x9E, 0xFC, 0x20, 0xFE, 0xA9, 0xFB, 0xA3, 0xFE, 0xC5, 
		0xFB, 0xA3, 0xFE, 0xCD, 0xFB, 0x7D, 0xFE, 0x8A, 0xFD, 0x83, 0xFF, 0x1A, 0xFB, 0x72, 0xFF, 0xD5, 
		0xFA, 0xED, 0xFF, 0x9C, 0xFC, 0x63, 0xFE, 0x77, 0xFB, 0x06, 0xFD, 0xA8, 0xFD, 0x4F, 0xFF, 0x7E, 
		0xFA, 0x39, 0xFE, 0xC8, 0xFA, 0xD7, 0xFF, 0x02, 0xFA, 0x48, 0xFE, 0x46, 0xFA, 0xF4, 0xFD, 0x9B, 
		0xFB, 0x13, 0xFE, 0x09, 0xFA, 0x23, 0xFE, 0x90, 0xFA, 0xD6, 0x00, 0x1A, 0xFA, 0x68, 0xFF, 0xBE, 
		0xF9, 0x31, 0xFF, 0x5F, 0xF9, 0x94, 0xFE, 0x2D, 0xF9, 0x20, 0xFD, 0xDC, 0xFA, 0x8F, 0xFD, 0xC8, 
		0xF9, 0xEC, 0xFC, 0x99, 0xFA, 0x29, 0xFB, 0xF6, 0xFA, 0x95, 0xFD, 0xC5, 0xF8, 0x83, 0xFD, 0xF0, 
		0xF9, 0x09, 0xFF, 0x85, 0xF8, 0x97, 0xFF, 0x19, 0xF7, 0xFA, 0xFE, 0xBD, 0xF7, 0xFC, 0xFC, 0x76, 
		0xF8, 0x48, 0xFD, 0xC9, 0xF8, 0x83, 0xFD, 0x94, 0xF8, 0x01, 0xFC, 0x23, 0xFB, 0xCB, 0xFE, 0x8E, 
		0xF8, 0x11, 0xFD, 0x40, 0xF6, 0xCD, 0xFD, 0x13, 0xF5, 0x4C, 0xFB, 0xBF, 0xF8, 0x8B, 0x00, 0x9F, 
		0xF8, 0x24, 0x00, 0xF8, 0xFD, 0x8E, 0xFF, 0x85, 0xF6, 0xDD, 0xFC, 0x3E, 0xFD, 0x63, 0xFE, 0x68, 
		0xFA, 0x9D, 0xFB, 0x6A, 0xFE, 0x3C, 0xFE, 0x94, 0xFB, 0xEC, 0xFD, 0x21, 0xFF, 0x7C, 0x00, 0xB7, 
		0xF9, 0xAC, 0xFD, 0x10, 0xFD, 0xDD, 0xFE, 0xCD, 0xFC, 0xF7, 0xFB, 0x13, 0xFF, 0x9E, 0x00, 0x29, 
		0xFC, 0x90, 0xFB, 0xBD, 0xFE, 0xFF, 0x00, 0x61, 0xF9, 0xBE, 0xF8, 0xD7, 0x00, 0x1F, 0xFF, 0xE6, 
		0xFD, 0x7C, 0xFD, 0xCF, 0xFF, 0x4C, 0xFD, 0xDE, 0xFE, 0x7F, 0xFB, 0xB9, 0xFE, 0x66, 0xFC, 0xDE, 
		0xFE, 0x62, 0xFC, 0xC5, 0xFE, 0x37, 0xFC, 0x36, 0xFE, 0x16, 0xFB, 0xAB, 0xFF, 0x29, 0xFC, 0x6C, 
		0xFF, 0x70, 0xFC, 0x57, 0xFE, 0x13, 0xFB, 0x0B, 0xFD, 0xFB, 0xFA, 0x1D, 0x00, 0xB5, 0x00, 0x65, 
		0xFE, 0xB4, 0xFC, 0x87, 0xFC, 0xBC, 0xFC, 0x57, 0xFD, 0xD1, 0xFE, 0x53, 0xFD, 0x8B, 0xFD, 0xDD, 
		0xFF, 0x49, 0xFE, 0xAF, 0xFD, 0xDF, 0xFF, 0xAE, 0xFF, 0x06, 0xFE, 0xE2, 0x00, 0x05, 0xFF, 0x7C, 
		0xFE, 0xA4, 0xFF, 0x04, 0xFE, 0xDB, 0xFE, 0x28, 0xFF, 0x62, 0x00, 0x64, 0xFF, 0xE3, 0x00, 0xC5, 
		0xFF, 0x14, 0xFE, 0x58, 0xFC, 0xA3, 0xFF, 0x2B, 0xFF, 0x74, 0xFF, 0xF9, 0xFE, 0x55, 0xFE, 0x45, 
		0x00, 0xBB, 0xFF, 0x9F, 0xFD, 0x54, 0xFD, 0x20, 0xFE, 0xDB, 0x01, 0x02, 0xFE, 0x90, 0xFF, 0x68, 
		0xFF, 0x6A, 0x01, 0x88, 0xFD, 0x9F, 0x00, 0xAF, 0xFF, 0x72, 0x01, 0x2B, 0xFF, 0x76, 0x00, 0x98, 
		0xFF, 0x89, 0x01, 0x49, 0xFE, 0x1A, 0xFF, 0xCC, 0x01, 0x25, 0x00, 0xC6, 0xFF, 0x49, 0x00, 0x75, 
		0x00, 0xAF, 0x01, 0x4B, 0xFF, 0xC6, 0xFE, 0xEE, 0x00, 0xE7, 0x01, 0x2C, 0xFE, 0xE0, 0x01, 0x4A, 
		0xFE, 0xCF, 0x01, 0x74, 0xFF, 0x91, 0x01, 0x99, 0xFF, 0xF7, 0x01, 0xA7, 0x00, 0x53, 0x01, 0x00, 
		0x00, 0x43, 0x01, 0x6F, 0xFF, 0xED, 0x00, 0xF8, 0x00, 0x5B, 0x00, 0x71, 0xFF, 0xDD, 0x01, 0x96, 
		0xFF, 0x41, 0x00, 0x9A, 0x00, 0xEE, 0x01, 0x28, 0x00, 0x05, 0x00, 0xC5, 0x00, 0x8D, 0x00, 0xDD, 
		0x01, 0x39, 0x00, 0xC6, 0x00, 0xD3, 0x01, 0xA5, 0x00, 0xF4, 0x01, 0x4E, 0x00, 0x58, 0x01, 0xAA, 
		0xFF, 0x0D, 0x01, 0xC6, 0x00, 0xCA, 0x02, 0x28, 0xFF, 0xFB, 0x01, 0x93, 0x01, 0x23, 0x00, 0xB9, 
		0x00, 0xDB, 0x01, 0x2D, 0x00, 0xFB, 0x00, 0x8A, 0x00, 0x80, 0x00, 0x45, 0x00, 0xC5, 0x01, 0x20, 
		0xFF, 0x74, 0xFF, 0xC3, 0x00, 0xBC, 0x01, 0x69, 0x00, 0xC5, 0x02, 0x56, 0x01, 0xBA, 0x01, 0x11, 
		0x01, 0x22, 0x00, 0x8F, 0x01, 0xD8, 0x01, 0xE2, 0x00, 0x9D, 0x01, 0x72, 0x01, 0x9F, 0x01, 0x41, 
		0x01, 0x74, 0x01, 0x81, 0x01, 0x92, 0x02, 0x28, 0x00, 0x9B, 0x00, 0x18, 0x02, 0x26, 0x01, 0x07, 
		0xFF, 0xF5, 0x00, 0x15, 0x01, 0x68, 0x00, 0xE3, 0x00, 0x93, 0xFF, 0x02, 0x01, 0xA8, 0x00, 0x61, 
		0x01, 0x6E, 0xFF, 0xF3, 0x01, 0x77, 0x00, 0x8D, 0x01, 0xC1, 0x00, 0xE8, 0x01, 0x8C, 0x01, 0xFB, 
		0x01, 0xDA, 0x01, 0x10, 0x02, 0xBD, 0x01, 0x44, 0x01, 0x6A, 0xFF, 0xD1, 0x02, 0x4B, 0x00, 0x94, 
		0x02, 0x1F, 0x00, 0x45, 0x01, 0x90, 0xFF, 0xCD, 0x02, 0x31, 0x00, 0x3B, 0x00, 0xDC, 0xFF, 0xF6, 
		0x01, 0x60, 0x00, 0x93, 0x00, 0xCE, 0x00, 0xD3, 0x02, 0x8D, 0x00, 0xB9, 0x02, 0x33, 0x01, 0x29, 
		0x02, 0x35, 0x01, 0x1C, 0x02, 0x52, 0x00, 0x79, 0x02, 0xFE, 0x00, 0xC0, 0x01, 0x8E, 0x00, 0x76, 
		0x02, 0x82, 0x01, 0xB2, 0x00, 0xE9, 0x01, 0x08, 0x01, 0xE1, 0x01, 0xD3, 0x00, 0x81, 0xFF, 0x5B, 
		0x02, 0xBB, 0x00, 0xEF, 0x00, 0x5A, 0x00, 0x1A, 0x01, 0x56, 0x01, 0xDA, 0xFF, 0xC9, 0x00, 0x1B, 
		0x01, 0x84, 0x00, 0x5E, 0xFF, 0x54, 0x00, 0x00, 0x02, 0xD5, 0x01, 0x7B, 0xFF, 0xC4, 0x01, 0x51, 
		0x01, 0x72, 0x01, 0xD1, 0x00, 0x5F, 0x01, 0x3F, 0x03, 0x26, 0x02, 0x53, 0x00, 0x4E, 0x01, 0x04, 
		0x01, 0xF1, 0x03, 0x53, 0x00, 0xD2, 0x02, 0x30, 0x01, 0xCA, 0x02, 0x3E, 0xFE, 0x30, 0x00, 0xCA, 
		0x01, 0xF1, 0x02, 0x71, 0xFF, 0x36, 0x00, 0x98, 0x00, 0x30, 0x02, 0xC8, 0xFF, 0xEC, 0x02, 0x36, 
		0x00, 0x64, 0x02, 0xCB, 0x01, 0xC7, 0x01, 0xD4, 0x01, 0x9B, 0x02, 0x5D, 0x01, 0x3F, 0x02, 0x86, 
		0x00, 0xC3, 0x02, 0x67, 0x01, 0x91, 0x02, 0x1A, 0x02, 0xA8, 0x02, 0xE3, 0x00, 0xC9, 0x02, 0x9B, 
		0x01, 0xB2, 0x03, 0xBA, 0x01, 0xC6, 0x01, 0xA9, 0x02, 0x86, 0x01, 0xEB, 0x02, 0x5E, 0x02, 0xA9, 
		0x01, 0xA0, 0x01, 0xFC, 0x01, 0xF1, 0x03, 0x36, 0x01, 0xAA, 0x03, 0x2F, 0x02, 0x94, 0x02, 0x87, 
		0x02, 0x74, 0x02, 0xCC, 0x02, 0xB9, 0x01, 0xD2, 0x02, 0x6A, 0x01, 0xC9, 0x02, 0xAD, 0x01, 0xCC, 
		0x01, 0x6D, 0x01, 0x35, 0x02, 0xD1, 0x02, 0x37, 0x03, 0x44, 0x02, 0x59, 0x02, 0x61, 0x01, 0x2C, 
		0x03, 0x39, 0x01, 0xCB, 0x03, 0xAF, 0x02, 0xAF, 0x02, 0xA9, 0x02, 0x15, 0x03, 0x93, 0x02, 0x56, 
		0x02, 0x4F, 0x00, 0xF3, 0x03, 0x6C, 0x01, 0xC3, 0x03, 0x6A, 0x01, 0xA4, 0x03, 0x12, 0x01, 0x3D, 
		0x02, 0xDC, 0x00, 0xDC, 0x03, 0x9A, 0x01, 0x3D, 0x04, 0x54, 0x01, 0x6F, 0x02, 0x13, 0x01, 0xD2, 
		0x04, 0x04, 0x02, 0x89, 0x04, 0x1D, 0x02, 0x67, 0x04, 0x0A, 0x02, 0x29, 0x03, 0x3D, 0x02, 0x5A, 
		0x03, 0xFD, 0x03, 0x1F, 0x03, 0x9F, 0x03, 0x23, 0x03, 0x6E, 0x02, 0xFB, 0x03, 0x1F, 0x01, 0xF0, 
		0x05, 0x5D, 0x03, 0x05, 0x02, 0x49, 0x03, 0x02, 0x03, 0x23, 0x03, 0xA2, 0x04, 0x4B, 0x03, 0x19, 
		0x04, 0xC6, 0x03, 0x5E, 0x04, 0xB9, 0x03, 0x7F, 0x04, 0x01, 0x02, 0xD7, 0x03, 0x04, 0x03, 0x4D, 
		0x04, 0x94, 0x04, 0x5B, 0x03, 0x63, 0x03, 0xFD, 0x03, 0x3E, 0x03, 0xF5, 0x03, 0x49, 0x03, 0x8E, 
		0x01, 0xFA, 0x02, 0xBF, 0x04, 0xD7, 0x04, 0x35, 0x02, 0x6C, 0x03, 0x33, 0x04, 0xAC, 0x04, 0x3B, 
		0x04, 0x83, 0x04, 0x39, 0x04, 0x76, 0x03, 0x8B, 0x06, 0x0B, 0x04, 0x61, 0x05, 0x1D, 0x02, 0x88, 
		0x05, 0x3F, 0x02, 0x64, 0x05, 0xCC, 0x03, 0xDC, 0x05, 0xC7, 0x03, 0xA9, 0x03, 0xD9, 0x05, 0x30, 
		0x03, 0xBB, 0x05, 0x3D, 0x01, 0xAD, 0x03, 0x8E, 0x03, 0x49, 0x05, 0x3A, 0x02, 0x34, 0x04, 0x9B, 
		0x01, 0x9C, 0x04, 0x84, 0x05, 0x93, 0x05, 0x28, 0x05, 0x9A, 0x05, 0x32, 0x02, 0x80, 0x02, 0xF8, 
		0x06, 0xBE, 0x05, 0x82, 0x00, 0xBE, 0x02, 0x2B, 0x04, 0x31, 0x03, 0xED, 0x01, 0xAA, 0x01, 0x01, 
		0x03, 0x47, 0x03, 0xD4, 0x00, 0xEB, 0x00, 0xE7, 0x05, 0xF0, 0x04, 0x8F, 0x00, 0x6D, 0x01, 0x25, 
		0x03, 0xF6, 0x06, 0x21, 0x01, 0x31, 0x00, 0x8E, 0x04, 0x7C, 0x02, 0x1B, 0xFE, 0xDD, 0xFF, 0x94, 
		0x04, 0xBD, 0x03, 0xCC, 0x00, 0x16, 0xFF, 0x28, 0x02, 0x9B, 0x03, 0x3C, 0xFE, 0x1E, 0x01, 0xB6, 
		0x01, 0xC5, 0x05, 0x97, 0xFD, 0xBB, 0xFE, 0x5A, 0x03, 0x15, 0x01, 0x83, 0xFE, 0x9A, 0xFE, 0x3A, 
		0x00, 0xAE, 0x03, 0x0C, 0xFF, 0xDC, 0xFE, 0x8C, 0x01, 0x86, 0xFF, 0x7A, 0xFD, 0x8B, 0x00, 0xA0, 
		0xFE, 0xCE, 0x02, 0xEF, 0xFB, 0x16, 0xFE, 0xB5, 0x00, 0xB1, 0x02, 0x0A, 0xFF, 0x08, 0x02, 0x3E, 
		0xFF, 0x05, 0x02, 0x7F, 0xFD, 0xED, 0x01, 0x97, 0xFD, 0xAC, 0x01, 0x8A, 0xFE, 0x5D, 0x03, 0x15, 
		0xFD, 0x97, 0x03, 0x21, 0xFC, 0x26, 0x01, 0x8F, 0xFC, 0xA7, 0x02, 0xD7, 0xFF, 0xF9, 0x02, 0x06, 
		0xFD, 0x41, 0x01, 0x36, 0xFB, 0x89, 0xFF, 0xE8, 0xFC, 0x16, 0x01, 0x1F, 0xFC, 0x40, 0x01, 0x6B, 
		0xFA, 0xED, 0x01, 0x38, 0xFA, 0x02, 0x00, 0xF5, 0xF9, 0xEB, 0x01, 0x31, 0x00, 0x1C, 0x00, 0x99, 
		0xFC, 0xA5, 0xFF, 0x51, 0xFF, 0xDF, 0x01, 0x4C, 0xFA, 0x8A, 0xFF, 0x66, 0x00, 0xD4, 0x01, 0x9A, 
		0xFD, 0xAF, 0xFF, 0x3B, 0xFB, 0xBC, 0xFD, 0x40, 0xFC, 0x78, 0xFF, 0xBF, 0x01, 0x1A, 0x01, 0x6F, 
		0xFC, 0x6A, 0xFD, 0x52, 0x01, 0x59, 0x00, 0x5D, 0xFE, 0xFE, 0xFE, 0x9B, 0x02, 0xB8, 0x02, 0x84, 
		0xFD, 0x4B, 0xFF, 0xE4, 0x01, 0xC0, 0x01, 0xED, 0xFE, 0xEF, 0x00, 0xC1, 0x02, 0x0F, 0x02, 0x22, 
		0xFF, 0x0D, 0xFD, 0xFF, 0x01, 0x80, 0xFF, 0x78, 0x01, 0x11, 0xFE, 0x9F, 0x02, 0x00, 0xFF, 0x72, 
		0x02, 0x19, 0xFF, 0x3A, 0x03, 0xAD, 0x02, 0xEE, 0x00, 0x53, 0x00, 0xF8, 0x02, 0x42, 0x03, 0x5D, 
		0xFF, 0xC8, 0x02, 0x50, 0x03, 0x4A, 0x00, 0x2C, 0x03, 0x7C, 0x00, 0x18, 0x00, 0x21, 0x03, 0x7A, 
		0xFF, 0xF0, 0x03, 0xD6, 0x03, 0x3F, 0x05, 0x76, 0x05, 0xFF, 0x07, 0x6A, 0x06, 0xB4, 0x05, 0x60, 
		0x07, 0x9C, 0x05, 0xB9, 0xFC, 0x16, 0xFC, 0x5F, 0xFB, 0xB8, 0xFB, 0x4D, 0xFD, 0x7F, 0xFC, 0x5D, 
		0xFD, 0xA4, 0xFC, 0x3F, 0xFC, 0xF5, 0xFD, 0x5F, 0xFC, 0xBD, 0xFC, 0xEC, 0xFE, 0x60, 0xFD, 0x68, 
		0xFE, 0x36, 0xFD, 0x02, 0xFD, 0x74, 0xFD, 0xF7, 0xFD, 0x6A, 0xFE, 0x11, 0xFC, 0x01, 0xFE, 0x03, 
		0xFC, 0x01, 0xFE, 0x54, 0xFE, 0x44, 0xFD, 0xD8, 0xFE, 0x90, 0xFE, 0x3F, 0xFE, 0x21, 0xFF, 0x2D, 
		0xFB, 0xE2, 0xFC, 0x79, 0xFE, 0xC4, 0xFF, 0x07, 0xFD, 0xC7, 0xFD, 0xB1, 0xFD, 0xC7, 0xFE, 0xED, 
		0xFD, 0xE3, 0xFF, 0x41, 0xFD, 0x34, 0xFF, 0x44, 0xFC, 0xB6, 0xFE, 0xF8, 0xFE, 0xB3, 0xFF, 0x08, 
		0xFE, 0xC2, 0xFF, 0x1C, 0xFE, 0xED, 0x00, 0x01, 0xFD, 0xC9, 0xFF, 0x1C, 0xFF, 0x8D, 0xFF, 0x23, 
		0xFF, 0x12, 0xFE, 0x8A, 0xFF, 0x3B, 0xFE, 0x05, 0xFF, 0x22, 0xFD, 0xBD, 0xFE, 0xFE, 0xFE, 0x50, 
		0xFF, 0xC3, 0xFF, 0x0C, 0xFE, 0xA7, 0x00, 0x02, 0xFE, 0xAE, 0x00, 0x27, 0xFF, 0x29, 0xFF, 0x57, 
		0xFF, 0xC6, 0x00, 0x00, 0xFF, 0xC8, 0xFF, 0xFA, 0xFF, 0x35, 0xFF, 0x7D, 0x00, 0x01, 0xFF, 0x46, 
		0xFF, 0xFB, 0xFF, 0x2D, 0x00, 0x06, 0xFE, 0x84, 0x00, 0x0B, 0xFE, 0x5E, 0xFF, 0x8C, 0x00, 0x83, 
		0xFF, 0x7A, 0x00, 0x71, 0x00, 0x59, 0xFF, 0xFC, 0x00, 0x47, 0xFF, 0xFE, 0xFF, 0xED, 0xFF, 0x40, 
		0x01, 0x06, 0x00, 0x18, 0x00, 0xBD, 0x00, 0x97, 0xFF, 0x7B, 0xFF, 0x93, 0x00, 0xBA, 0xFF, 0x67, 
		0x00, 0xA6, 0xFF, 0x25, 0x00, 0x25, 0x00, 0x8B, 0x00, 0xC1, 0x00, 0xAB, 0x01, 0x51, 0x00, 0x7C, 
		0x00, 0x9E, 0xFF, 0xC3, 0x00, 0x8D, 0x00, 0xE2, 0xFF, 0xF3, 0x00, 0xBE, 0x00, 0xE7, 0x00, 0x22, 
		0x01, 0x62, 0x00, 0x6D, 0x01, 0x3C, 0x00, 0xC9, 0x00, 0xF4, 0x00, 0xA4, 0x01, 0x4A, 0xFF, 0xAB, 
		0x01, 0x86, 0xFF, 0xAC, 0x00, 0xFE, 0x01, 0x47, 0x01, 0x01, 0x01, 0x4F, 0x01, 0xEB, 0x00, 0x93, 
		0x01, 0xDC, 0x00, 0x69, 0x00, 0x36, 0x00, 0x4D, 0x01, 0xB5, 0x01, 0x72, 0x01, 0xA5, 0x01, 0x3A, 
		0x01, 0xC1, 0x01, 0x56, 0x01, 0x49, 0x00, 0x7E, 0x02, 0xA1, 0x01, 0x24, 0x02, 0x3B, 0x01, 0x84, 
		0x00, 0xF3, 0x00, 0xC1, 0x02, 0x8D, 0x01, 0x40, 0x02, 0x6D, 0x01, 0x18, 0x00, 0xC2, 0x01, 0x7C, 
		0x02, 0x05, 0x02, 0x45, 0x00, 0x2D, 0x01, 0x43, 0x00, 0x6F, 0x01, 0xA6, 0x01, 0xE9, 0x01, 0x8B, 
		0x02, 0xDE, 0x02, 0x16, 0x02, 0x6E, 0x02, 0x22, 0x01, 0xE6, 0x01, 0xF6, 0x01, 0x3E, 0x02, 0x3C, 
		0x00, 0xBD, 0x02, 0x26, 0x01, 0x81, 0x01, 0xA6, 0xFF, 0x63, 0x00, 0x99, 0xFF, 0x83, 0x01, 0x7E, 
		0xFF, 0x3B, 0x01, 0x82, 0xFE, 0xF9, 0x01, 0x4E, 0x00, 0xE4, 0x02, 0xB9, 0xFF, 0x44, 0x00, 0x01, 
		0x00, 0x33, 0x01, 0x29, 0xFE, 0x05, 0x00, 0xD5, 0xFE, 0x88, 0x01, 0x8D, 0xFF, 0xE8, 0x00, 0xFF, 
		0xFD, 0xDD, 0x00, 0x59, 0xFE, 0x0A, 0xFF, 0xA2, 0x01, 0x83, 0x00, 0xB3, 0xFD, 0x94, 0x00, 0x44, 
		0xFD, 0x54, 0x00, 0x70, 0xFD, 0x7E, 0xFE, 0xA2, 0xFE, 0xFC, 0x00, 0xAC, 0xFE, 0x4A, 0xFE, 0xBC, 
		0x01, 0x08, 0x02, 0x88, 0xFC, 0x3C, 0xFF, 0xFC, 0xFB, 0x9F, 0x00, 0x07, 0xFF, 0x7A, 0x00, 0x86, 
		0xFB, 0x93, 0xFE, 0xCE, 0x00, 0x8F, 0x00, 0x60, 0xFE, 0x5C, 0xFE, 0x0F, 0xFB, 0x3B, 0xFE, 0xA2, 
		0xFA, 0x09, 0xFD, 0x53, 0xFF, 0x5F, 0x00, 0x48, 0x03, 0x69, 0x02, 0xB3, 0x02, 0xDC, 0x01, 0x1B, 
		0x03, 0x99, 0x01, 0x61, 0x01, 0x4E, 0x01, 0xDB, 0x04, 0x47, 0x03, 0x35, 0x03, 0x60, 0x02, 0x0C, 
		0x03, 0x4B, 0x01, 0xF1, 0x02, 0xCA, 0x02, 0xC7, 0x03, 0x14, 0x02, 0xEE, 0x04, 0x34, 0x02, 0xCA, 
		0x04, 0xB4, 0x02, 0xF1, 0x00, 0x66, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
		0x7F, 0xFF, 0x7C, 0x2E, 0x78, 0xAE, 0x75, 0x76, 0x72, 0x7D, 0x6F, 0xBA, 0x6D, 0x29, 0x6A, 0xC2, 
		0x68, 0x83, 0x66, 0x66, 0x64, 0x69, 0x62, 0x89, 0x60, 0xC2, 0x5F, 0x13, 0x5D, 0x7A, 0x5B, 0xF5, 
		0x5A, 0x82, 0x59, 0x21, 0x57, 0xCF, 0x56, 0x8B, 0x55, 0x55, 0x54, 0x2C, 0x53, 0x0F, 0x51, 0xFC, 
		0x50, 0xF4, 0x4F, 0xF6, 0x4F, 0x01, 0x4E, 0x14, 0x4D, 0x30, 0x4C, 0x53, 0x4B, 0x7E, 0x4A, 0xAF, 
		0x49, 0xE7, 0x49, 0x25, 0x48, 0x68, 0x47, 0xB2, 0x47, 0x00, 0x46, 0x54, 0x45, 0xAD, 0x45, 0x0A, 
		0x44, 0x6B, 0x43, 0xD1, 0x43, 0x3B, 0x42, 0xA8, 0x42, 0x19, 0x41, 0x8E, 0x41, 0x06, 0x40, 0x82, 
		0x40, 0x00, 0x52, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 
		0x00, 0x00, 0x05, 0xAF, 0x0B, 0x32, 0x10, 0x8C, 0x15, 0xC0, 0x1A, 0xCF, 0x1F, 0xBC, 0x24, 0x88, 
		0x29, 0x35, 0x2D, 0xC4, 0x32, 0x37, 0x36, 0x8F, 0x3A, 0xCE, 0x3E, 0xF5, 0x43, 0x04, 0x46, 0xFC, 
		0x4A, 0xDF, 0x4E, 0xAE, 0x52, 0x69, 0x56, 0x11, 0x59, 0xA7, 0x5D, 0x2C, 0x60, 0x9F, 0x64, 0x03, 
		0x67, 0x57, 0x6A, 0x9B, 0x6D, 0xD1, 0x70, 0xFA, 0x74, 0x14, 0x77, 0x21, 0x7A, 0x22, 0x7D, 0x17, 
		0x7F, 0xFF, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 
		0x7F, 0xFF, 0x7F, 0xD9, 0x7F, 0x62, 0x7E, 0x9D, 0x7D, 0x8A, 0x7C, 0x2A, 0x7A, 0x7D, 0x78, 0x85, 
		0x76, 0x42, 0x73, 0xB6, 0x70, 0xE3, 0x6D, 0xCA, 0x6A, 0x6E, 0x66, 0xD0, 0x62, 0xF2, 0x5E, 0xD7, 
		0x5A, 0x82, 0x55, 0xF6, 0x51, 0x34, 0x4C, 0x40, 0x47, 0x1D, 0x41, 0xCE, 0x3C, 0x57, 0x36, 0xBA, 
		0x30, 0xFC, 0x2B, 0x1F, 0x25, 0x28, 0x1F, 0x1A, 0x18, 0xF9, 0x12, 0xC8, 0x0C, 0x8C, 0x06, 0x48, 
		0x00, 0x00, 0xF9, 0xB8, 0xF3, 0x74, 0xED, 0x38, 0xE7, 0x07, 0xE0, 0xE6, 0xDA, 0xD8, 0xD4, 0xE1, 
		0xCF, 0x04, 0xC9, 0x46, 0xC3, 0xA9, 0xBE, 0x32, 0xB8, 0xE3, 0xB3, 0xC0, 0xAE, 0xCC, 0xAA, 0x0A, 
		0xA5, 0x7E, 0xA1, 0x29, 0x9D, 0x0E, 0x99, 0x30, 0x95, 0x92, 0x92, 0x36, 0x8F, 0x1D, 0x8C, 0x4A, 
		0x89, 0xBE, 0x87, 0x7B, 0x85, 0x83, 0x83, 0xD6, 0x82, 0x76, 0x81, 0x63, 0x80, 0x9E, 0x80, 0x27, 
		0x80, 0x00, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x4F, 0x66, 0x66, 0x73, 
		0x40, 0x00, 0x41, 0x67, 0x42, 0xD5, 0x44, 0x4C, 0x45, 0xCB, 0x47, 0x52, 0x48, 0xE2, 0x4A, 0x7A, 
		0x4C, 0x1C, 0x4D, 0xC7, 0x4F, 0x7B, 0x51, 0x38, 0x52, 0xFF, 0x54, 0xD1, 0x56, 0xAC, 0x58, 0x92, 
		0x5A, 0x82, 0x5C, 0x7E, 0x5E, 0x84, 0x60, 0x96, 0x62, 0xB4, 0x64, 0xDD, 0x67, 0x12, 0x69, 0x54, 
		0x6B, 0xA2, 0x6D, 0xFE, 0x70, 0x66, 0x72, 0xDD, 0x75, 0x60, 0x77, 0xF2, 0x7A, 0x93, 0x7D, 0x42, 
		0x7F, 0xFF, 0x00, 0x00, 0x0D, 0x00, 0x08, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x2E, 
		0x73, 0x03, 0x6E, 0xBA, 0x62, 0x77, 0x4F, 0xE1, 0x39, 0x6D, 0x21, 0xF5, 0x0C, 0x47, 0xFA, 0xB8, 
		0xEE, 0xCE, 0xE9, 0x17, 0xE9, 0x26, 0xED, 0xBF, 0xF5, 0x21, 0xFD, 0x60, 0x04, 0xBB, 0x09, 0xE8, 
		0x0C, 0x3A, 0x0B, 0xAF, 0x08, 0xD3, 0x04, 0x92, 0x00, 0x00, 0xFC, 0x17, 0xF9, 0x8C, 0xF8, 0xB4, 
		0xF9, 0x7E, 0xFB, 0x85, 0xFE, 0x30, 0x00, 0xDA, 0x02, 0xF4, 0x04, 0x24, 0x04, 0x4B, 0x03, 0x88, 
		0x02, 0x26, 0x00, 0x87, 0xFF, 0x0B, 0xFD, 0xFE, 0xFD, 0x86, 0xFD, 0xA6, 0xFE, 0x3D, 0xFF, 0x19, 
		0x00, 0x00, 0x00, 0xBF, 0x01, 0x34, 0x01, 0x54, 0x01, 0x28, 0x00, 0xC6, 0x00, 0x4E, 0xFF, 0xDC, 
		0xFF, 0x88, 0xFF, 0x5D, 0xFF, 0x5B, 0xFF, 0x7C, 0xFF, 0xB1, 0xFF, 0xED, 0x00, 0x22, 0x00, 0x49, 
		0x00, 0x5B, 0x00, 0x59, 0x00, 0x46, 0x00, 0x26, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x18, 0x00, 
		0x59, 0x9A, 0x3E, 0xB9, 0x2B, 0xE8, 0x1E, 0xBC, 0x15, 0x84, 0x0F, 0x10, 0x0A, 0x8B, 0x07, 0x61, 
		0x05, 0x2A, 0x03, 0x9D, 0x60, 0x00, 0x48, 0x00, 0x36, 0x00, 0x28, 0x80, 0x1E, 0x60, 0x16, 0xC8, 
		0x11, 0x16, 0x0C, 0xD1, 0x09, 0x9D, 0x07, 0x36, 0x6B, 0x65, 0x07, 0x75, 0x53, 0x70, 0x72, 0x69, 
		0x00, 0x01, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 
		0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 
		0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 
		0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 
		0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
		0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
		0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
		0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
		0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
		0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
		0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
		0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
		0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
		0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
		0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
		0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
	} ;
	// Copy Predictors Type 3;
	for (int x = 0; x < 0x2240; x++)
	{
		Buffer[(0x800F0580 & 0xFFFFFF) + x] = ROMF1180[x]; //ROM[0xF1180 + x];
	}

	if (soundType == 2)
	{
		// Type 02
		variable801242EC_C_S2 = 0x801545D4;
		variable801242F0_10_S2_CompressedDataSpot = 0x80162910;
		variable801242F8_18_S2 = 0;
		variable80124300_20_S2 = numChunks;
		variable8012430C_2C_S2 = 0x00000000;
		variable80124320_40_S2 = 0x005F;

		unsigned long A0 = 0x801242E0;
		unsigned long A1 = 0x80148440;
		unsigned long A2 = 0x00000170;

		memcpy(&Buffer[variable801242F0_10_S2_CompressedDataSpot & 0xFFFFFF], &ROM[address], length);

		for (int chunk = 0; chunk < numChunks; chunk++)
		{
			Function8008102C(ROM, romSize, address, length, Buffer, pcmSamples, A0, A1, A2);
		}
	}
	else if (soundType == 3)
	{
		// Setup first?
		//80081958
		Function800842F8(ROM, romSize, address, length, Buffer);

		// Type 03
		variable_801283B4 = numChunks;
		variable_80128454 = 0xA0;
		variable_80128458 = 0x00000000;
		variable_801283B0_ROM_Location = address;
		variable_80124338 = 0x5F;
		variable_8012433C = 0x2F;

		//80083908
		unsigned long A0 = 0x80148440;
		unsigned long A1 = 0x00000170;
		unsigned long A2 = variable_80124338;
		unsigned long A3 = variable_8012433C;
		unsigned long V0 = 0;

		while (variable_80128458 < (variable_801283B4 << 3))
		{
			Function800840A0(ROM, romSize, address, length, Buffer, pcmSamples, A0, A1, A2, A3, V0);

			if (V0 != 0)
			{
				WriteLongToBuffer(Buffer, 0x801242E0, 0);
			}
		}
	}

	delete [] Buffer;
	return true;
}